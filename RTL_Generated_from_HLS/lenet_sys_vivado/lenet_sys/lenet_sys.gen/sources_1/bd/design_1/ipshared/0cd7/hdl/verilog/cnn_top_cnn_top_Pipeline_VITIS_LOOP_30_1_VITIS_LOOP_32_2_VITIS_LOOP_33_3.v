// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cnn_top_cnn_top_Pipeline_VITIS_LOOP_30_1_VITIS_LOOP_32_2_VITIS_LOOP_33_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv2d_1_V_address0,
        conv2d_1_V_ce0,
        conv2d_1_V_q0,
        conv2d_1_V_address1,
        conv2d_1_V_ce1,
        conv2d_1_V_q1,
        conv2d_1_V_address2,
        conv2d_1_V_ce2,
        conv2d_1_V_q2,
        conv2d_1_V_address3,
        conv2d_1_V_ce3,
        conv2d_1_V_q3,
        max_pooling2d_1_V_address0,
        max_pooling2d_1_V_ce0,
        max_pooling2d_1_V_we0,
        max_pooling2d_1_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] conv2d_1_V_address0;
output   conv2d_1_V_ce0;
input  [31:0] conv2d_1_V_q0;
output  [8:0] conv2d_1_V_address1;
output   conv2d_1_V_ce1;
input  [31:0] conv2d_1_V_q1;
output  [8:0] conv2d_1_V_address2;
output   conv2d_1_V_ce2;
input  [31:0] conv2d_1_V_q2;
output  [8:0] conv2d_1_V_address3;
output   conv2d_1_V_ce3;
input  [31:0] conv2d_1_V_q3;
output  [6:0] max_pooling2d_1_V_address0;
output   max_pooling2d_1_V_ce0;
output   max_pooling2d_1_V_we0;
output  [31:0] max_pooling2d_1_V_d0;

reg ap_idle;
reg conv2d_1_V_ce0;
reg conv2d_1_V_ce1;
reg conv2d_1_V_ce2;
reg conv2d_1_V_ce3;
reg max_pooling2d_1_V_ce0;
reg max_pooling2d_1_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln30_fu_209_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln32_fu_230_p2;
reg   [0:0] icmp_ln32_reg_634;
reg   [0:0] icmp_ln32_reg_634_pp0_iter1_reg;
wire   [2:0] trunc_ln30_fu_258_p1;
reg   [2:0] trunc_ln30_reg_640;
reg   [2:0] trunc_ln30_reg_640_pp0_iter1_reg;
wire   [0:0] and_ln30_fu_274_p2;
reg   [0:0] and_ln30_reg_645;
reg   [0:0] and_ln30_reg_645_pp0_iter1_reg;
wire   [31:0] select_ln39_3_fu_495_p3;
reg   [31:0] select_ln39_3_reg_671;
wire   [63:0] zext_ln38_fu_346_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln38_1_fu_357_p1;
wire   [63:0] zext_ln38_2_fu_368_p1;
wire   [63:0] zext_ln38_3_fu_379_p1;
wire   [63:0] zext_ln43_fu_560_p1;
reg   [2:0] y_fu_74;
wire   [2:0] add_ln33_fu_384_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_y_load;
reg   [4:0] index_fu_78;
wire   [4:0] add_ln44_fu_565_p2;
reg   [2:0] z_1_fu_82;
wire   [2:0] select_ln32_3_fu_304_p3;
reg   [2:0] ap_sig_allocacmp_z;
reg   [4:0] index_2_fu_86;
wire   [4:0] select_ln32_2_fu_543_p3;
reg   [5:0] indvar_flatten282_fu_90;
wire   [5:0] select_ln32_5_fu_396_p3;
reg   [5:0] ap_sig_allocacmp_indvar_flatten282_load;
reg   [3:0] i_1_fu_94;
wire   [3:0] select_ln30_3_fu_250_p3;
reg   [3:0] ap_sig_allocacmp_i_1_load;
reg   [7:0] indvar_flatten303_fu_98;
wire   [7:0] add_ln30_fu_215_p2;
reg   [7:0] ap_sig_allocacmp_indvar_flatten303_load;
wire   [3:0] add_ln30_1_fu_244_p2;
wire   [0:0] icmp_ln33_fu_268_p2;
wire   [0:0] xor_ln30_fu_262_p2;
wire   [2:0] select_ln30_1_fu_236_p3;
wire   [0:0] or_ln32_fu_286_p2;
wire   [2:0] add_ln32_fu_280_p2;
wire   [2:0] select_ln32_1_fu_292_p3;
wire   [1:0] empty_fu_205_p1;
wire   [1:0] empty_76_fu_300_p1;
wire   [1:0] select_ln30_4_fu_316_p3;
wire   [1:0] select_ln32_4_fu_324_p3;
wire   [1:0] empty_77_fu_312_p1;
wire   [8:0] add_ln_fu_332_p6;
wire   [8:0] or_ln37_fu_351_p2;
wire   [8:0] or_ln37_1_fu_362_p2;
wire   [8:0] or_ln37_2_fu_373_p2;
wire   [5:0] add_ln32_2_fu_390_p2;
wire   [0:0] icmp_ln1651_fu_429_p2;
wire   [31:0] select_ln39_fu_435_p3;
wire   [0:0] icmp_ln1651_4_fu_443_p2;
wire   [0:0] xor_ln1651_fu_449_p2;
wire   [31:0] select_ln39_1_fu_455_p3;
wire   [0:0] icmp_ln1651_5_fu_463_p2;
wire   [0:0] xor_ln1651_3_fu_469_p2;
wire   [31:0] select_ln39_2_fu_475_p3;
wire   [0:0] icmp_ln1651_6_fu_483_p2;
wire   [0:0] xor_ln1651_4_fu_489_p2;
wire   [4:0] select_ln30_fu_509_p3;
wire   [4:0] add_ln32_1_fu_530_p2;
wire   [4:0] select_ln30_2_fu_516_p3;
wire   [4:0] select_ln32_fu_536_p3;
wire   [6:0] index_3_cast_fu_550_p1;
wire   [6:0] p_mid2_fu_523_p3;
wire   [6:0] add_ln42_fu_554_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cnn_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln30_fu_209_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_94 <= select_ln30_3_fu_250_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_94 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            index_2_fu_86 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            index_2_fu_86 <= select_ln32_2_fu_543_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            index_fu_78 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            index_fu_78 <= add_ln44_fu_565_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln30_fu_209_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten282_fu_90 <= select_ln32_5_fu_396_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten282_fu_90 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln30_fu_209_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten303_fu_98 <= add_ln30_fu_215_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten303_fu_98 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln30_fu_209_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            y_fu_74 <= add_ln33_fu_384_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            y_fu_74 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln30_fu_209_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            z_1_fu_82 <= select_ln32_3_fu_304_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            z_1_fu_82 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_209_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln30_reg_645 <= and_ln30_fu_274_p2;
        icmp_ln32_reg_634 <= icmp_ln32_fu_230_p2;
        trunc_ln30_reg_640 <= trunc_ln30_fu_258_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln30_reg_645_pp0_iter1_reg <= and_ln30_reg_645;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln32_reg_634_pp0_iter1_reg <= icmp_ln32_reg_634;
        select_ln39_3_reg_671 <= select_ln39_3_fu_495_p3;
        trunc_ln30_reg_640_pp0_iter1_reg <= trunc_ln30_reg_640;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_209_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_1_load = i_1_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten282_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten282_load = indvar_flatten282_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten303_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten303_load = indvar_flatten303_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_y_load = 3'd0;
    end else begin
        ap_sig_allocacmp_y_load = y_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_z = 3'd0;
    end else begin
        ap_sig_allocacmp_z = z_1_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2d_1_V_ce0 = 1'b1;
    end else begin
        conv2d_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2d_1_V_ce1 = 1'b1;
    end else begin
        conv2d_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2d_1_V_ce2 = 1'b1;
    end else begin
        conv2d_1_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv2d_1_V_ce3 = 1'b1;
    end else begin
        conv2d_1_V_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        max_pooling2d_1_V_ce0 = 1'b1;
    end else begin
        max_pooling2d_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        max_pooling2d_1_V_we0 = 1'b1;
    end else begin
        max_pooling2d_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln30_1_fu_244_p2 = (ap_sig_allocacmp_i_1_load + 4'd1);

assign add_ln30_fu_215_p2 = (ap_sig_allocacmp_indvar_flatten303_load + 8'd1);

assign add_ln32_1_fu_530_p2 = (select_ln30_fu_509_p3 + 5'd4);

assign add_ln32_2_fu_390_p2 = (ap_sig_allocacmp_indvar_flatten282_load + 6'd1);

assign add_ln32_fu_280_p2 = (select_ln30_1_fu_236_p3 + 3'd1);

assign add_ln33_fu_384_p2 = (select_ln32_1_fu_292_p3 + 3'd1);

assign add_ln42_fu_554_p2 = (index_3_cast_fu_550_p1 + p_mid2_fu_523_p3);

assign add_ln44_fu_565_p2 = (select_ln32_fu_536_p3 + 5'd1);

assign add_ln_fu_332_p6 = {{{{{trunc_ln30_fu_258_p1}, {select_ln32_4_fu_324_p3}}, {1'd0}}, {empty_77_fu_312_p1}}, {1'd0}};

assign and_ln30_fu_274_p2 = (xor_ln30_fu_262_p2 & icmp_ln33_fu_268_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv2d_1_V_address0 = zext_ln38_3_fu_379_p1;

assign conv2d_1_V_address1 = zext_ln38_2_fu_368_p1;

assign conv2d_1_V_address2 = zext_ln38_1_fu_357_p1;

assign conv2d_1_V_address3 = zext_ln38_fu_346_p1;

assign empty_76_fu_300_p1 = add_ln32_fu_280_p2[1:0];

assign empty_77_fu_312_p1 = select_ln32_1_fu_292_p3[1:0];

assign empty_fu_205_p1 = ap_sig_allocacmp_z[1:0];

assign icmp_ln1651_4_fu_443_p2 = (($signed(conv2d_1_V_q2) < $signed(select_ln39_fu_435_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1651_5_fu_463_p2 = (($signed(conv2d_1_V_q1) < $signed(select_ln39_1_fu_455_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1651_6_fu_483_p2 = (($signed(conv2d_1_V_q0) < $signed(select_ln39_2_fu_475_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1651_fu_429_p2 = (($signed(conv2d_1_V_q3) < $signed(32'd4294311936)) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_209_p2 = ((ap_sig_allocacmp_indvar_flatten303_load == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_230_p2 = ((ap_sig_allocacmp_indvar_flatten282_load == 6'd16) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_268_p2 = ((ap_sig_allocacmp_y_load == 3'd4) ? 1'b1 : 1'b0);

assign index_3_cast_fu_550_p1 = select_ln32_fu_536_p3;

assign max_pooling2d_1_V_address0 = zext_ln43_fu_560_p1;

assign max_pooling2d_1_V_d0 = select_ln39_3_reg_671;

assign or_ln32_fu_286_p2 = (icmp_ln32_fu_230_p2 | and_ln30_fu_274_p2);

assign or_ln37_1_fu_362_p2 = (9'd8 | add_ln_fu_332_p6);

assign or_ln37_2_fu_373_p2 = (9'd9 | add_ln_fu_332_p6);

assign or_ln37_fu_351_p2 = (9'd1 | add_ln_fu_332_p6);

assign p_mid2_fu_523_p3 = {{trunc_ln30_reg_640_pp0_iter1_reg}, {4'd0}};

assign select_ln30_1_fu_236_p3 = ((icmp_ln32_fu_230_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_z);

assign select_ln30_2_fu_516_p3 = ((icmp_ln32_reg_634_pp0_iter1_reg[0:0] == 1'b1) ? 5'd0 : index_fu_78);

assign select_ln30_3_fu_250_p3 = ((icmp_ln32_fu_230_p2[0:0] == 1'b1) ? add_ln30_1_fu_244_p2 : ap_sig_allocacmp_i_1_load);

assign select_ln30_4_fu_316_p3 = ((icmp_ln32_fu_230_p2[0:0] == 1'b1) ? 2'd0 : empty_fu_205_p1);

assign select_ln30_fu_509_p3 = ((icmp_ln32_reg_634_pp0_iter1_reg[0:0] == 1'b1) ? 5'd0 : index_2_fu_86);

assign select_ln32_1_fu_292_p3 = ((or_ln32_fu_286_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_y_load);

assign select_ln32_2_fu_543_p3 = ((and_ln30_reg_645_pp0_iter1_reg[0:0] == 1'b1) ? add_ln32_1_fu_530_p2 : select_ln30_fu_509_p3);

assign select_ln32_3_fu_304_p3 = ((and_ln30_fu_274_p2[0:0] == 1'b1) ? add_ln32_fu_280_p2 : select_ln30_1_fu_236_p3);

assign select_ln32_4_fu_324_p3 = ((and_ln30_fu_274_p2[0:0] == 1'b1) ? empty_76_fu_300_p1 : select_ln30_4_fu_316_p3);

assign select_ln32_5_fu_396_p3 = ((icmp_ln32_fu_230_p2[0:0] == 1'b1) ? 6'd1 : add_ln32_2_fu_390_p2);

assign select_ln32_fu_536_p3 = ((and_ln30_reg_645_pp0_iter1_reg[0:0] == 1'b1) ? add_ln32_1_fu_530_p2 : select_ln30_2_fu_516_p3);

assign select_ln39_1_fu_455_p3 = ((xor_ln1651_fu_449_p2[0:0] == 1'b1) ? conv2d_1_V_q2 : select_ln39_fu_435_p3);

assign select_ln39_2_fu_475_p3 = ((xor_ln1651_3_fu_469_p2[0:0] == 1'b1) ? conv2d_1_V_q1 : select_ln39_1_fu_455_p3);

assign select_ln39_3_fu_495_p3 = ((xor_ln1651_4_fu_489_p2[0:0] == 1'b1) ? conv2d_1_V_q0 : select_ln39_2_fu_475_p3);

assign select_ln39_fu_435_p3 = ((icmp_ln1651_fu_429_p2[0:0] == 1'b1) ? 32'd4294311936 : conv2d_1_V_q3);

assign trunc_ln30_fu_258_p1 = select_ln30_3_fu_250_p3[2:0];

assign xor_ln1651_3_fu_469_p2 = (icmp_ln1651_5_fu_463_p2 ^ 1'd1);

assign xor_ln1651_4_fu_489_p2 = (icmp_ln1651_6_fu_483_p2 ^ 1'd1);

assign xor_ln1651_fu_449_p2 = (icmp_ln1651_4_fu_443_p2 ^ 1'd1);

assign xor_ln30_fu_262_p2 = (icmp_ln32_fu_230_p2 ^ 1'd1);

assign zext_ln38_1_fu_357_p1 = or_ln37_fu_351_p2;

assign zext_ln38_2_fu_368_p1 = or_ln37_1_fu_362_p2;

assign zext_ln38_3_fu_379_p1 = or_ln37_2_fu_373_p2;

assign zext_ln38_fu_346_p1 = add_ln_fu_332_p6;

assign zext_ln43_fu_560_p1 = add_ln42_fu_554_p2;

endmodule //cnn_top_cnn_top_Pipeline_VITIS_LOOP_30_1_VITIS_LOOP_32_2_VITIS_LOOP_33_3
