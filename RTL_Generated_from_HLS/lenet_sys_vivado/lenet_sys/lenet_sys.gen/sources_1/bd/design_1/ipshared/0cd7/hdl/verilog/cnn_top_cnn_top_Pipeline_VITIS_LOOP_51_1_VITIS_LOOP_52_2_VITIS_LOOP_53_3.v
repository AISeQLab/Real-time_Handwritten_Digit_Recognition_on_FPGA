// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cnn_top_cnn_top_Pipeline_VITIS_LOOP_51_1_VITIS_LOOP_52_2_VITIS_LOOP_53_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pooling2d_1_V_address0,
        max_pooling2d_1_V_ce0,
        max_pooling2d_1_V_q0,
        flatten_V_address0,
        flatten_V_ce0,
        flatten_V_we0,
        flatten_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] max_pooling2d_1_V_address0;
output   max_pooling2d_1_V_ce0;
input  [31:0] max_pooling2d_1_V_q0;
output  [6:0] flatten_V_address0;
output   flatten_V_ce0;
output   flatten_V_we0;
output  [31:0] flatten_V_d0;

reg ap_idle;
reg max_pooling2d_1_V_ce0;
reg flatten_V_ce0;
reg flatten_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln51_fu_162_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [0:0] icmp_ln52_fu_186_p2;
reg   [0:0] icmp_ln52_reg_479;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] and_ln51_fu_230_p2;
reg   [0:0] and_ln51_reg_486;
wire   [63:0] zext_ln54_fu_288_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] hs_1_cast_fu_394_p1;
reg   [3:0] k_fu_60;
wire   [3:0] add_ln53_fu_293_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_k_load;
reg   [7:0] hs_1_fu_64;
wire   [7:0] add_ln55_fu_399_p2;
reg   [2:0] j_fu_68;
wire   [2:0] select_ln52_2_fu_256_p3;
reg   [2:0] ap_sig_allocacmp_j_load;
reg   [7:0] hs_fu_72;
wire   [7:0] select_ln52_3_fu_387_p3;
reg   [6:0] indvar_flatten310_fu_76;
wire   [6:0] select_ln52_4_fu_305_p3;
reg   [6:0] ap_sig_allocacmp_indvar_flatten310_load;
reg   [2:0] i_2_fu_80;
wire   [2:0] select_ln51_3_fu_206_p3;
reg   [2:0] ap_sig_allocacmp_i_2_load;
reg   [7:0] indvars_iv359_fu_84;
wire   [7:0] select_ln51_4_fu_367_p3;
reg   [7:0] indvar_flatten329_fu_88;
wire   [7:0] add_ln51_fu_168_p2;
reg   [7:0] ap_sig_allocacmp_indvar_flatten329_load;
wire   [2:0] add_ln51_2_fu_200_p2;
wire   [0:0] icmp_ln53_fu_224_p2;
wire   [0:0] xor_ln51_fu_218_p2;
wire   [2:0] select_ln51_1_fu_192_p3;
wire   [0:0] or_ln52_fu_242_p2;
wire   [2:0] add_ln52_fu_236_p2;
wire   [3:0] select_ln52_1_fu_248_p3;
wire   [2:0] trunc_ln54_fu_268_p1;
wire   [1:0] trunc_ln51_fu_214_p1;
wire   [6:0] tmp14_fu_272_p4;
wire   [6:0] select_ln52_2_cast_fu_264_p1;
wire   [6:0] add_ln54_fu_282_p2;
wire   [6:0] add_ln52_2_fu_299_p2;
wire   [7:0] add_ln51_1_fu_347_p2;
wire   [7:0] select_ln51_fu_353_p3;
wire   [7:0] add_ln52_1_fu_374_p2;
wire   [7:0] select_ln51_2_fu_360_p3;
wire   [7:0] select_ln52_fu_380_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cnn_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            hs_1_fu_64 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            hs_1_fu_64 <= add_ln55_fu_399_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            hs_fu_72 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            hs_fu_72 <= select_ln52_3_fu_387_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln51_fu_162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_2_fu_80 <= select_ln51_3_fu_206_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_2_fu_80 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln51_fu_162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten310_fu_76 <= select_ln52_4_fu_305_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten310_fu_76 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln51_fu_162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten329_fu_88 <= add_ln51_fu_168_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten329_fu_88 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvars_iv359_fu_84 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            indvars_iv359_fu_84 <= select_ln51_4_fu_367_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln51_fu_162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_68 <= select_ln52_2_fu_256_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_68 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln51_fu_162_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_60 <= add_ln53_fu_293_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_60 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_fu_162_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln51_reg_486 <= and_ln51_fu_230_p2;
        icmp_ln52_reg_479 <= icmp_ln52_fu_186_p2;
    end
end

always @ (*) begin
    if (((icmp_ln51_fu_162_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_2_load = 3'd0;
    end else begin
        ap_sig_allocacmp_i_2_load = i_2_fu_80;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten310_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten310_load = indvar_flatten310_fu_76;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten329_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten329_load = indvar_flatten329_fu_88;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_68;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_load = 4'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flatten_V_ce0 = 1'b1;
    end else begin
        flatten_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flatten_V_we0 = 1'b1;
    end else begin
        flatten_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_pooling2d_1_V_ce0 = 1'b1;
    end else begin
        max_pooling2d_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln51_1_fu_347_p2 = (indvars_iv359_fu_84 + 8'd32);

assign add_ln51_2_fu_200_p2 = (ap_sig_allocacmp_i_2_load + 3'd1);

assign add_ln51_fu_168_p2 = (ap_sig_allocacmp_indvar_flatten329_load + 8'd1);

assign add_ln52_1_fu_374_p2 = (select_ln51_fu_353_p3 + 8'd8);

assign add_ln52_2_fu_299_p2 = (ap_sig_allocacmp_indvar_flatten310_load + 7'd1);

assign add_ln52_fu_236_p2 = (select_ln51_1_fu_192_p3 + 3'd1);

assign add_ln53_fu_293_p2 = (select_ln52_1_fu_248_p3 + 4'd1);

assign add_ln54_fu_282_p2 = (tmp14_fu_272_p4 + select_ln52_2_cast_fu_264_p1);

assign add_ln55_fu_399_p2 = (select_ln52_fu_380_p3 + 8'd1);

assign and_ln51_fu_230_p2 = (xor_ln51_fu_218_p2 & icmp_ln53_fu_224_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign flatten_V_address0 = hs_1_cast_fu_394_p1;

assign flatten_V_d0 = max_pooling2d_1_V_q0;

assign hs_1_cast_fu_394_p1 = select_ln52_fu_380_p3;

assign icmp_ln51_fu_162_p2 = ((ap_sig_allocacmp_indvar_flatten329_load == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_186_p2 = ((ap_sig_allocacmp_indvar_flatten310_load == 7'd32) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_224_p2 = ((ap_sig_allocacmp_k_load == 4'd8) ? 1'b1 : 1'b0);

assign max_pooling2d_1_V_address0 = zext_ln54_fu_288_p1;

assign or_ln52_fu_242_p2 = (icmp_ln52_fu_186_p2 | and_ln51_fu_230_p2);

assign select_ln51_1_fu_192_p3 = ((icmp_ln52_fu_186_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_load);

assign select_ln51_2_fu_360_p3 = ((icmp_ln52_reg_479[0:0] == 1'b1) ? add_ln51_1_fu_347_p2 : hs_1_fu_64);

assign select_ln51_3_fu_206_p3 = ((icmp_ln52_fu_186_p2[0:0] == 1'b1) ? add_ln51_2_fu_200_p2 : ap_sig_allocacmp_i_2_load);

assign select_ln51_4_fu_367_p3 = ((icmp_ln52_reg_479[0:0] == 1'b1) ? add_ln51_1_fu_347_p2 : indvars_iv359_fu_84);

assign select_ln51_fu_353_p3 = ((icmp_ln52_reg_479[0:0] == 1'b1) ? add_ln51_1_fu_347_p2 : hs_fu_72);

assign select_ln52_1_fu_248_p3 = ((or_ln52_fu_242_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_k_load);

assign select_ln52_2_cast_fu_264_p1 = select_ln52_2_fu_256_p3;

assign select_ln52_2_fu_256_p3 = ((and_ln51_fu_230_p2[0:0] == 1'b1) ? add_ln52_fu_236_p2 : select_ln51_1_fu_192_p3);

assign select_ln52_3_fu_387_p3 = ((and_ln51_reg_486[0:0] == 1'b1) ? add_ln52_1_fu_374_p2 : select_ln51_fu_353_p3);

assign select_ln52_4_fu_305_p3 = ((icmp_ln52_fu_186_p2[0:0] == 1'b1) ? 7'd1 : add_ln52_2_fu_299_p2);

assign select_ln52_fu_380_p3 = ((and_ln51_reg_486[0:0] == 1'b1) ? add_ln52_1_fu_374_p2 : select_ln51_2_fu_360_p3);

assign tmp14_fu_272_p4 = {{{trunc_ln54_fu_268_p1}, {trunc_ln51_fu_214_p1}}, {2'd0}};

assign trunc_ln51_fu_214_p1 = select_ln51_3_fu_206_p3[1:0];

assign trunc_ln54_fu_268_p1 = select_ln52_1_fu_248_p3[2:0];

assign xor_ln51_fu_218_p2 = (icmp_ln52_fu_186_p2 ^ 1'd1);

assign zext_ln54_fu_288_p1 = add_ln54_fu_282_p2;

endmodule //cnn_top_cnn_top_Pipeline_VITIS_LOOP_51_1_VITIS_LOOP_52_2_VITIS_LOOP_53_3
