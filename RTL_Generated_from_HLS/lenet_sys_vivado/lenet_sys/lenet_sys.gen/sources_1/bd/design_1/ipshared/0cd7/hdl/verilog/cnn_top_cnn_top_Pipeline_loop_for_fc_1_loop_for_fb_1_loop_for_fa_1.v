// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cnn_top_cnn_top_Pipeline_loop_for_fc_1_loop_for_fb_1_loop_for_fa_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RFIFONUM,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        sext_ln29_3,
        select_ln31_2,
        p_mid1224,
        zext_ln33_1,
        max_pooling2d_V_address0,
        max_pooling2d_V_ce0,
        max_pooling2d_V_q0,
        s_V_4_out,
        s_V_4_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [63:0] m_axi_gmem1_AWADDR;
output  [0:0] m_axi_gmem1_AWID;
output  [31:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [0:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [31:0] m_axi_gmem1_WDATA;
output  [3:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [0:0] m_axi_gmem1_WID;
output  [0:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [63:0] m_axi_gmem1_ARADDR;
output  [0:0] m_axi_gmem1_ARID;
output  [31:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [0:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [31:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [0:0] m_axi_gmem1_RID;
input  [8:0] m_axi_gmem1_RFIFONUM;
input  [0:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [0:0] m_axi_gmem1_BID;
input  [0:0] m_axi_gmem1_BUSER;
input  [61:0] sext_ln29_3;
input  [3:0] select_ln31_2;
input  [8:0] p_mid1224;
input  [3:0] zext_ln33_1;
output  [9:0] max_pooling2d_V_address0;
output   max_pooling2d_V_ce0;
input  [31:0] max_pooling2d_V_q0;
output  [31:0] s_V_4_out;
output   s_V_4_out_ap_vld;

reg ap_idle;
reg m_axi_gmem1_RREADY;
reg max_pooling2d_V_ce0;
reg s_V_4_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln36_reg_623;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln36_fu_218_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem1_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] zext_ln33_1_cast_fu_177_p1;
reg   [8:0] zext_ln33_1_cast_reg_613;
reg  signed [31:0] r_V_reg_627;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln1271_fu_465_p1;
reg   [31:0] lhs_fu_104;
wire    ap_loop_init;
reg   [2:0] j_fu_108;
wire   [2:0] add_ln40_fu_470_p2;
reg   [2:0] i_fu_112;
wire   [2:0] select_ln38_2_fu_416_p3;
reg   [5:0] indvar_flatten196_fu_116;
wire   [5:0] select_ln38_3_fu_482_p3;
reg   [2:0] k_fu_120;
wire   [2:0] select_ln36_1_fu_312_p3;
reg   [6:0] indvar_flatten228_fu_124;
wire   [6:0] add_ln36_fu_224_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten228_load;
reg    ap_block_pp0_stage0_01001;
wire   [3:0] zext_ln38_fu_244_p1;
wire   [3:0] empty_fu_248_p2;
wire   [7:0] p_shl4_fu_253_p3;
wire   [5:0] p_shl6_fu_265_p3;
wire   [8:0] p_shl16_cast_fu_261_p1;
wire   [8:0] p_shl17_cast_fu_273_p1;
wire   [0:0] icmp_ln38_fu_292_p2;
wire   [2:0] add_ln36_1_fu_306_p2;
wire   [8:0] empty_50_fu_277_p2;
wire   [0:0] icmp_ln40_fu_337_p2;
wire   [0:0] xor_ln36_fu_331_p2;
wire   [2:0] select_ln36_fu_298_p3;
wire   [0:0] and_ln36_fu_343_p2;
wire   [0:0] or_ln38_fu_355_p2;
wire   [2:0] add_ln38_fu_349_p2;
wire   [3:0] zext_ln38_1_fu_369_p1;
wire   [3:0] p_mid1192_fu_373_p2;
wire   [7:0] p_shl16_mid1_fu_378_p3;
wire   [5:0] p_shl17_mid1_fu_390_p3;
wire   [8:0] p_shl16_cast_mid1_fu_386_p1;
wire   [8:0] p_shl17_cast_mid1_fu_398_p1;
wire   [8:0] p_mid1194_fu_402_p2;
wire   [8:0] select_ln36_2_fu_324_p3;
wire   [2:0] select_ln38_fu_361_p3;
wire   [1:0] trunc_ln36_fu_320_p1;
wire   [8:0] tmp9_fu_428_p5;
wire   [8:0] j_2_cast_fu_424_p1;
wire   [8:0] add_ln41_fu_444_p2;
wire   [8:0] select_ln38_1_fu_408_p3;
wire   [8:0] add_ln41_2_fu_449_p2;
wire  signed [9:0] sext_ln41_fu_455_p1;
wire   [9:0] zext_ln41_fu_440_p1;
wire   [9:0] add_ln41_1_fu_459_p2;
wire   [5:0] add_ln38_1_fu_476_p2;
wire   [47:0] lhs_1_fu_526_p3;
wire   [47:0] r_V_4_fu_520_p2;
wire   [47:0] ret_V_fu_534_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cnn_top_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U36(
    .din0(max_pooling2d_V_q0),
    .din1(r_V_reg_627),
    .dout(r_V_4_fu_520_p2)
);

cnn_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_112 <= 3'd0;
        end else if (((icmp_ln36_reg_623 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_112 <= select_ln38_2_fu_416_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten196_fu_116 <= 6'd0;
        end else if (((icmp_ln36_reg_623 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten196_fu_116 <= select_ln38_3_fu_482_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_fu_218_p2 == 1'd0))) begin
            indvar_flatten228_fu_124 <= add_ln36_fu_224_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten228_fu_124 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_108 <= 3'd0;
        end else if (((icmp_ln36_reg_623 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_108 <= add_ln40_fu_470_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_fu_120 <= 3'd0;
        end else if (((icmp_ln36_reg_623 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            k_fu_120 <= select_ln36_1_fu_312_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            lhs_fu_104 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            lhs_fu_104 <= {{ret_V_fu_534_p2[47:16]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln36_reg_623 <= icmp_ln36_fu_218_p2;
        zext_ln33_1_cast_reg_613[3 : 0] <= zext_ln33_1_cast_fu_177_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln36_reg_623 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_V_reg_627 <= m_axi_gmem1_RDATA;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_fu_218_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln36_reg_623 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten228_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten228_load = indvar_flatten228_fu_124;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln36_reg_623 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem1_blk_n_R = m_axi_gmem1_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln36_reg_623 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_gmem1_RREADY = 1'b1;
    end else begin
        m_axi_gmem1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_pooling2d_V_ce0 = 1'b1;
    end else begin
        max_pooling2d_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln36_reg_623 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_V_4_out_ap_vld = 1'b1;
    end else begin
        s_V_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln36_1_fu_306_p2 = (k_fu_120 + 3'd1);

assign add_ln36_fu_224_p2 = (ap_sig_allocacmp_indvar_flatten228_load + 7'd1);

assign add_ln38_1_fu_476_p2 = (indvar_flatten196_fu_116 + 6'd1);

assign add_ln38_fu_349_p2 = (select_ln36_fu_298_p3 + 3'd1);

assign add_ln40_fu_470_p2 = (select_ln38_fu_361_p3 + 3'd1);

assign add_ln41_1_fu_459_p2 = ($signed(sext_ln41_fu_455_p1) + $signed(zext_ln41_fu_440_p1));

assign add_ln41_2_fu_449_p2 = (add_ln41_fu_444_p2 + select_ln38_1_fu_408_p3);

assign add_ln41_fu_444_p2 = (zext_ln33_1_cast_reg_613 + j_2_cast_fu_424_p1);

assign and_ln36_fu_343_p2 = (xor_ln36_fu_331_p2 & icmp_ln40_fu_337_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln36_reg_623 == 1'd0) & (m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln36_reg_623 == 1'd0) & (m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln36_reg_623 == 1'd0) & (m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln36_reg_623 == 1'd0) & (m_axi_gmem1_RVALID == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_50_fu_277_p2 = (p_shl16_cast_fu_261_p1 - p_shl17_cast_fu_273_p1);

assign empty_fu_248_p2 = (zext_ln38_fu_244_p1 + select_ln31_2);

assign icmp_ln36_fu_218_p2 = ((ap_sig_allocacmp_indvar_flatten228_load == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_292_p2 = ((indvar_flatten196_fu_116 == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_337_p2 = ((j_fu_108 == 3'd5) ? 1'b1 : 1'b0);

assign j_2_cast_fu_424_p1 = select_ln38_fu_361_p3;

assign lhs_1_fu_526_p3 = {{lhs_fu_104}, {16'd0}};

assign m_axi_gmem1_ARADDR = 64'd0;

assign m_axi_gmem1_ARBURST = 2'd0;

assign m_axi_gmem1_ARCACHE = 4'd0;

assign m_axi_gmem1_ARID = 1'd0;

assign m_axi_gmem1_ARLEN = 32'd0;

assign m_axi_gmem1_ARLOCK = 2'd0;

assign m_axi_gmem1_ARPROT = 3'd0;

assign m_axi_gmem1_ARQOS = 4'd0;

assign m_axi_gmem1_ARREGION = 4'd0;

assign m_axi_gmem1_ARSIZE = 3'd0;

assign m_axi_gmem1_ARUSER = 1'd0;

assign m_axi_gmem1_ARVALID = 1'b0;

assign m_axi_gmem1_AWADDR = 64'd0;

assign m_axi_gmem1_AWBURST = 2'd0;

assign m_axi_gmem1_AWCACHE = 4'd0;

assign m_axi_gmem1_AWID = 1'd0;

assign m_axi_gmem1_AWLEN = 32'd0;

assign m_axi_gmem1_AWLOCK = 2'd0;

assign m_axi_gmem1_AWPROT = 3'd0;

assign m_axi_gmem1_AWQOS = 4'd0;

assign m_axi_gmem1_AWREGION = 4'd0;

assign m_axi_gmem1_AWSIZE = 3'd0;

assign m_axi_gmem1_AWUSER = 1'd0;

assign m_axi_gmem1_AWVALID = 1'b0;

assign m_axi_gmem1_BREADY = 1'b0;

assign m_axi_gmem1_WDATA = 32'd0;

assign m_axi_gmem1_WID = 1'd0;

assign m_axi_gmem1_WLAST = 1'b0;

assign m_axi_gmem1_WSTRB = 4'd0;

assign m_axi_gmem1_WUSER = 1'd0;

assign m_axi_gmem1_WVALID = 1'b0;

assign max_pooling2d_V_address0 = zext_ln1271_fu_465_p1;

assign or_ln38_fu_355_p2 = (icmp_ln38_fu_292_p2 | and_ln36_fu_343_p2);

assign p_mid1192_fu_373_p2 = (zext_ln38_1_fu_369_p1 + select_ln31_2);

assign p_mid1194_fu_402_p2 = (p_shl16_cast_mid1_fu_386_p1 - p_shl17_cast_mid1_fu_398_p1);

assign p_shl16_cast_fu_261_p1 = p_shl4_fu_253_p3;

assign p_shl16_cast_mid1_fu_386_p1 = p_shl16_mid1_fu_378_p3;

assign p_shl16_mid1_fu_378_p3 = {{p_mid1192_fu_373_p2}, {4'd0}};

assign p_shl17_cast_fu_273_p1 = p_shl6_fu_265_p3;

assign p_shl17_cast_mid1_fu_398_p1 = p_shl17_mid1_fu_390_p3;

assign p_shl17_mid1_fu_390_p3 = {{p_mid1192_fu_373_p2}, {2'd0}};

assign p_shl4_fu_253_p3 = {{empty_fu_248_p2}, {4'd0}};

assign p_shl6_fu_265_p3 = {{empty_fu_248_p2}, {2'd0}};

assign ret_V_fu_534_p2 = (lhs_1_fu_526_p3 + r_V_4_fu_520_p2);

assign s_V_4_out = lhs_fu_104;

assign select_ln36_1_fu_312_p3 = ((icmp_ln38_fu_292_p2[0:0] == 1'b1) ? add_ln36_1_fu_306_p2 : k_fu_120);

assign select_ln36_2_fu_324_p3 = ((icmp_ln38_fu_292_p2[0:0] == 1'b1) ? p_mid1224 : empty_50_fu_277_p2);

assign select_ln36_fu_298_p3 = ((icmp_ln38_fu_292_p2[0:0] == 1'b1) ? 3'd0 : i_fu_112);

assign select_ln38_1_fu_408_p3 = ((and_ln36_fu_343_p2[0:0] == 1'b1) ? p_mid1194_fu_402_p2 : select_ln36_2_fu_324_p3);

assign select_ln38_2_fu_416_p3 = ((and_ln36_fu_343_p2[0:0] == 1'b1) ? add_ln38_fu_349_p2 : select_ln36_fu_298_p3);

assign select_ln38_3_fu_482_p3 = ((icmp_ln38_fu_292_p2[0:0] == 1'b1) ? 6'd1 : add_ln38_1_fu_476_p2);

assign select_ln38_fu_361_p3 = ((or_ln38_fu_355_p2[0:0] == 1'b1) ? 3'd0 : j_fu_108);

assign sext_ln41_fu_455_p1 = $signed(add_ln41_2_fu_449_p2);

assign tmp9_fu_428_p5 = {{{{trunc_ln36_fu_320_p1}, {1'd0}}, {trunc_ln36_fu_320_p1}}, {4'd0}};

assign trunc_ln36_fu_320_p1 = select_ln36_1_fu_312_p3[1:0];

assign xor_ln36_fu_331_p2 = (icmp_ln38_fu_292_p2 ^ 1'd1);

assign zext_ln1271_fu_465_p1 = add_ln41_1_fu_459_p2;

assign zext_ln33_1_cast_fu_177_p1 = zext_ln33_1;

assign zext_ln38_1_fu_369_p1 = add_ln38_fu_349_p2;

assign zext_ln38_fu_244_p1 = i_fu_112;

assign zext_ln41_fu_440_p1 = tmp9_fu_428_p5;

always @ (posedge ap_clk) begin
    zext_ln33_1_cast_reg_613[8:4] <= 5'b00000;
end

endmodule //cnn_top_cnn_top_Pipeline_loop_for_fc_1_loop_for_fb_1_loop_for_fa_1
