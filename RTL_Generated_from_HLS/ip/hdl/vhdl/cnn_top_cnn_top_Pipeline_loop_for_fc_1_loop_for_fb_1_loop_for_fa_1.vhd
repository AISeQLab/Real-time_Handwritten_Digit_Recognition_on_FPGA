-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_top_cnn_top_Pipeline_loop_for_fc_1_loop_for_fb_1_loop_for_fa_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln29_3 : IN STD_LOGIC_VECTOR (61 downto 0);
    select_ln31_2 : IN STD_LOGIC_VECTOR (3 downto 0);
    p_mid1224 : IN STD_LOGIC_VECTOR (8 downto 0);
    zext_ln33_1 : IN STD_LOGIC_VECTOR (3 downto 0);
    max_pooling2d_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    max_pooling2d_V_ce0 : OUT STD_LOGIC;
    max_pooling2d_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    s_V_4_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_V_4_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cnn_top_cnn_top_Pipeline_loop_for_fc_1_loop_for_fb_1_loop_for_fa_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln36_reg_623 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln36_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem1_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln33_1_cast_fu_177_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln33_1_cast_reg_613 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_reg_627 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal zext_ln1271_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln40_fu_470_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_fu_112 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln38_2_fu_416_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten196_fu_116 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln38_3_fu_482_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_fu_120 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln36_1_fu_312_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten228_fu_124 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_fu_224_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten228_load : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln38_fu_244_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_248_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl4_fu_253_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_fu_265_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl16_cast_fu_261_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl17_cast_fu_273_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln38_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln36_1_fu_306_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_50_fu_277_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln40_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln36_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_fu_298_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln36_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln38_fu_349_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln38_1_fu_369_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid1192_fu_373_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl16_mid1_fu_378_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl17_mid1_fu_390_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl16_cast_mid1_fu_386_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl17_cast_mid1_fu_398_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid1194_fu_402_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln36_2_fu_324_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln38_fu_361_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln36_fu_320_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp9_fu_428_p5 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_2_cast_fu_424_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln41_fu_444_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln38_1_fu_408_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln41_2_fu_449_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln41_fu_455_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln41_fu_440_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln41_1_fu_459_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_1_fu_476_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_1_fu_526_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_4_fu_520_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ret_V_fu_534_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_top_mul_32s_32s_48_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component cnn_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_48_1_1_U36 : component cnn_top_mul_32s_32s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        din0 => max_pooling2d_V_q0,
        din1 => r_V_reg_627,
        dout => r_V_4_fu_520_p2);

    flow_control_loop_pipe_sequential_init_U : component cnn_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_112 <= ap_const_lv3_0;
                elsif (((icmp_ln36_reg_623 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_112 <= select_ln38_2_fu_416_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten196_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten196_fu_116 <= ap_const_lv6_0;
                elsif (((icmp_ln36_reg_623 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten196_fu_116 <= select_ln38_3_fu_482_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten228_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_fu_218_p2 = ap_const_lv1_0))) then 
                    indvar_flatten228_fu_124 <= add_ln36_fu_224_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten228_fu_124 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_108 <= ap_const_lv3_0;
                elsif (((icmp_ln36_reg_623 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_108 <= add_ln40_fu_470_p2;
                end if;
            end if; 
        end if;
    end process;

    k_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_120 <= ap_const_lv3_0;
                elsif (((icmp_ln36_reg_623 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    k_fu_120 <= select_ln36_1_fu_312_p3;
                end if;
            end if; 
        end if;
    end process;

    lhs_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    lhs_fu_104 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    lhs_fu_104 <= ret_V_fu_534_p2(47 downto 16);
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln36_reg_623 <= icmp_ln36_fu_218_p2;
                    zext_ln33_1_cast_reg_613(3 downto 0) <= zext_ln33_1_cast_fu_177_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_reg_623 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                r_V_reg_627 <= m_axi_gmem1_RDATA;
            end if;
        end if;
    end process;
    zext_ln33_1_cast_reg_613(8 downto 4) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln36_1_fu_306_p2 <= std_logic_vector(unsigned(k_fu_120) + unsigned(ap_const_lv3_1));
    add_ln36_fu_224_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten228_load) + unsigned(ap_const_lv7_1));
    add_ln38_1_fu_476_p2 <= std_logic_vector(unsigned(indvar_flatten196_fu_116) + unsigned(ap_const_lv6_1));
    add_ln38_fu_349_p2 <= std_logic_vector(unsigned(select_ln36_fu_298_p3) + unsigned(ap_const_lv3_1));
    add_ln40_fu_470_p2 <= std_logic_vector(unsigned(select_ln38_fu_361_p3) + unsigned(ap_const_lv3_1));
    add_ln41_1_fu_459_p2 <= std_logic_vector(signed(sext_ln41_fu_455_p1) + signed(zext_ln41_fu_440_p1));
    add_ln41_2_fu_449_p2 <= std_logic_vector(unsigned(add_ln41_fu_444_p2) + unsigned(select_ln38_1_fu_408_p3));
    add_ln41_fu_444_p2 <= std_logic_vector(unsigned(zext_ln33_1_cast_reg_613) + unsigned(j_2_cast_fu_424_p1));
    and_ln36_fu_343_p2 <= (xor_ln36_fu_331_p2 and icmp_ln40_fu_337_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem1_RVALID, icmp_ln36_reg_623)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln36_reg_623 = ap_const_lv1_0) and (m_axi_gmem1_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem1_RVALID, icmp_ln36_reg_623)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln36_reg_623 = ap_const_lv1_0) and (m_axi_gmem1_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem1_RVALID, icmp_ln36_reg_623)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln36_reg_623 = ap_const_lv1_0) and (m_axi_gmem1_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_gmem1_RVALID, icmp_ln36_reg_623)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln36_reg_623 = ap_const_lv1_0) and (m_axi_gmem1_RVALID = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln36_fu_218_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln36_fu_218_p2 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln36_reg_623, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln36_reg_623 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten228_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten228_fu_124)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten228_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten228_load <= indvar_flatten228_fu_124;
        end if; 
    end process;

    empty_50_fu_277_p2 <= std_logic_vector(unsigned(p_shl16_cast_fu_261_p1) - unsigned(p_shl17_cast_fu_273_p1));
    empty_fu_248_p2 <= std_logic_vector(unsigned(zext_ln38_fu_244_p1) + unsigned(select_ln31_2));

    gmem1_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem1_RVALID, icmp_ln36_reg_623, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln36_reg_623 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gmem1_blk_n_R <= m_axi_gmem1_RVALID;
        else 
            gmem1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln36_fu_218_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten228_load = ap_const_lv7_64) else "0";
    icmp_ln38_fu_292_p2 <= "1" when (indvar_flatten196_fu_116 = ap_const_lv6_19) else "0";
    icmp_ln40_fu_337_p2 <= "1" when (j_fu_108 = ap_const_lv3_5) else "0";
    j_2_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln38_fu_361_p3),9));
    lhs_1_fu_526_p3 <= (lhs_fu_104 & ap_const_lv16_0);
    m_axi_gmem1_ARADDR <= ap_const_lv64_0;
    m_axi_gmem1_ARBURST <= ap_const_lv2_0;
    m_axi_gmem1_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem1_ARID <= ap_const_lv1_0;
    m_axi_gmem1_ARLEN <= ap_const_lv32_0;
    m_axi_gmem1_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem1_ARPROT <= ap_const_lv3_0;
    m_axi_gmem1_ARQOS <= ap_const_lv4_0;
    m_axi_gmem1_ARREGION <= ap_const_lv4_0;
    m_axi_gmem1_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem1_ARUSER <= ap_const_lv1_0;
    m_axi_gmem1_ARVALID <= ap_const_logic_0;
    m_axi_gmem1_AWADDR <= ap_const_lv64_0;
    m_axi_gmem1_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_AWID <= ap_const_lv1_0;
    m_axi_gmem1_AWLEN <= ap_const_lv32_0;
    m_axi_gmem1_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_AWUSER <= ap_const_lv1_0;
    m_axi_gmem1_AWVALID <= ap_const_logic_0;
    m_axi_gmem1_BREADY <= ap_const_logic_0;

    m_axi_gmem1_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln36_reg_623, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_reg_623 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_gmem1_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_WDATA <= ap_const_lv32_0;
    m_axi_gmem1_WID <= ap_const_lv1_0;
    m_axi_gmem1_WLAST <= ap_const_logic_0;
    m_axi_gmem1_WSTRB <= ap_const_lv4_0;
    m_axi_gmem1_WUSER <= ap_const_lv1_0;
    m_axi_gmem1_WVALID <= ap_const_logic_0;
    max_pooling2d_V_address0 <= zext_ln1271_fu_465_p1(10 - 1 downto 0);

    max_pooling2d_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            max_pooling2d_V_ce0 <= ap_const_logic_1;
        else 
            max_pooling2d_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln38_fu_355_p2 <= (icmp_ln38_fu_292_p2 or and_ln36_fu_343_p2);
    p_mid1192_fu_373_p2 <= std_logic_vector(unsigned(zext_ln38_1_fu_369_p1) + unsigned(select_ln31_2));
    p_mid1194_fu_402_p2 <= std_logic_vector(unsigned(p_shl16_cast_mid1_fu_386_p1) - unsigned(p_shl17_cast_mid1_fu_398_p1));
    p_shl16_cast_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_253_p3),9));
    p_shl16_cast_mid1_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl16_mid1_fu_378_p3),9));
    p_shl16_mid1_fu_378_p3 <= (p_mid1192_fu_373_p2 & ap_const_lv4_0);
    p_shl17_cast_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl6_fu_265_p3),9));
    p_shl17_cast_mid1_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl17_mid1_fu_390_p3),9));
    p_shl17_mid1_fu_390_p3 <= (p_mid1192_fu_373_p2 & ap_const_lv2_0);
    p_shl4_fu_253_p3 <= (empty_fu_248_p2 & ap_const_lv4_0);
    p_shl6_fu_265_p3 <= (empty_fu_248_p2 & ap_const_lv2_0);
    ret_V_fu_534_p2 <= std_logic_vector(unsigned(lhs_1_fu_526_p3) + unsigned(r_V_4_fu_520_p2));
    s_V_4_out <= lhs_fu_104;

    s_V_4_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln36_reg_623, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_reg_623 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_V_4_out_ap_vld <= ap_const_logic_1;
        else 
            s_V_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln36_1_fu_312_p3 <= 
        add_ln36_1_fu_306_p2 when (icmp_ln38_fu_292_p2(0) = '1') else 
        k_fu_120;
    select_ln36_2_fu_324_p3 <= 
        p_mid1224 when (icmp_ln38_fu_292_p2(0) = '1') else 
        empty_50_fu_277_p2;
    select_ln36_fu_298_p3 <= 
        ap_const_lv3_0 when (icmp_ln38_fu_292_p2(0) = '1') else 
        i_fu_112;
    select_ln38_1_fu_408_p3 <= 
        p_mid1194_fu_402_p2 when (and_ln36_fu_343_p2(0) = '1') else 
        select_ln36_2_fu_324_p3;
    select_ln38_2_fu_416_p3 <= 
        add_ln38_fu_349_p2 when (and_ln36_fu_343_p2(0) = '1') else 
        select_ln36_fu_298_p3;
    select_ln38_3_fu_482_p3 <= 
        ap_const_lv6_1 when (icmp_ln38_fu_292_p2(0) = '1') else 
        add_ln38_1_fu_476_p2;
    select_ln38_fu_361_p3 <= 
        ap_const_lv3_0 when (or_ln38_fu_355_p2(0) = '1') else 
        j_fu_108;
        sext_ln41_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln41_2_fu_449_p2),10));

    tmp9_fu_428_p5 <= (((trunc_ln36_fu_320_p1 & ap_const_lv1_0) & trunc_ln36_fu_320_p1) & ap_const_lv4_0);
    trunc_ln36_fu_320_p1 <= select_ln36_1_fu_312_p3(2 - 1 downto 0);
    xor_ln36_fu_331_p2 <= (icmp_ln38_fu_292_p2 xor ap_const_lv1_1);
    zext_ln1271_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_1_fu_459_p2),64));
    zext_ln33_1_cast_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln33_1),9));
    zext_ln38_1_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_fu_349_p2),4));
    zext_ln38_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_112),4));
    zext_ln41_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp9_fu_428_p5),10));
end behav;
