-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_top_cnn_top_Pipeline_VITIS_LOOP_30_1_VITIS_LOOP_32_2_VITIS_LOOP_33_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv2d_1_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    conv2d_1_V_ce0 : OUT STD_LOGIC;
    conv2d_1_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2d_1_V_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    conv2d_1_V_ce1 : OUT STD_LOGIC;
    conv2d_1_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2d_1_V_address2 : OUT STD_LOGIC_VECTOR (8 downto 0);
    conv2d_1_V_ce2 : OUT STD_LOGIC;
    conv2d_1_V_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2d_1_V_address3 : OUT STD_LOGIC_VECTOR (8 downto 0);
    conv2d_1_V_ce3 : OUT STD_LOGIC;
    conv2d_1_V_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pooling2d_1_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    max_pooling2d_1_V_ce0 : OUT STD_LOGIC;
    max_pooling2d_1_V_we0 : OUT STD_LOGIC;
    max_pooling2d_1_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cnn_top_cnn_top_Pipeline_VITIS_LOOP_30_1_VITIS_LOOP_32_2_VITIS_LOOP_33_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv9_9 : STD_LOGIC_VECTOR (8 downto 0) := "000001001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_FFF60000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111101100000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln30_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln32_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_634_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln30_fu_258_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln30_reg_640 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln30_reg_640_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln30_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_645_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_3_fu_495_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln39_3_reg_671 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln38_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln38_1_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_2_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_3_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_74 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln33_fu_384_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_y_load : STD_LOGIC_VECTOR (2 downto 0);
    signal index_fu_78 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln44_fu_565_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal z_1_fu_82 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln32_3_fu_304_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_z : STD_LOGIC_VECTOR (2 downto 0);
    signal index_2_fu_86 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_2_fu_543_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten282_fu_90 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln32_5_fu_396_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten282_load : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_fu_94 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln30_3_fu_250_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_1_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten303_fu_98 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln30_fu_215_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten303_load : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln30_1_fu_244_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln33_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln30_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_1_fu_236_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln32_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_fu_280_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln32_1_fu_292_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_205_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_76_fu_300_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln30_4_fu_316_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln32_4_fu_324_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_77_fu_312_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln_fu_332_p6 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln37_fu_351_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln37_1_fu_362_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln37_2_fu_373_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln32_2_fu_390_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1651_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_fu_435_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1651_4_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1651_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_1_fu_455_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1651_5_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1651_3_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_2_fu_475_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1651_6_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1651_4_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_fu_509_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln32_1_fu_530_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_2_fu_516_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_fu_536_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal index_3_cast_fu_550_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid2_fu_523_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln42_fu_554_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component cnn_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln30_fu_209_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_1_fu_94 <= select_ln30_3_fu_250_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_94 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    index_2_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    index_2_fu_86 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    index_2_fu_86 <= select_ln32_2_fu_543_p3;
                end if;
            end if; 
        end if;
    end process;

    index_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    index_fu_78 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    index_fu_78 <= add_ln44_fu_565_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten282_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln30_fu_209_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten282_fu_90 <= select_ln32_5_fu_396_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten282_fu_90 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten303_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln30_fu_209_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten303_fu_98 <= add_ln30_fu_215_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten303_fu_98 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    y_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln30_fu_209_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    y_fu_74 <= add_ln33_fu_384_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_74 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    z_1_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln30_fu_209_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    z_1_fu_82 <= select_ln32_3_fu_304_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    z_1_fu_82 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_209_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln30_reg_645 <= and_ln30_fu_274_p2;
                icmp_ln32_reg_634 <= icmp_ln32_fu_230_p2;
                trunc_ln30_reg_640 <= trunc_ln30_fu_258_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln30_reg_645_pp0_iter1_reg <= and_ln30_reg_645;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln32_reg_634_pp0_iter1_reg <= icmp_ln32_reg_634;
                select_ln39_3_reg_671 <= select_ln39_3_fu_495_p3;
                trunc_ln30_reg_640_pp0_iter1_reg <= trunc_ln30_reg_640;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln30_1_fu_244_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1_load) + unsigned(ap_const_lv4_1));
    add_ln30_fu_215_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten303_load) + unsigned(ap_const_lv8_1));
    add_ln32_1_fu_530_p2 <= std_logic_vector(unsigned(select_ln30_fu_509_p3) + unsigned(ap_const_lv5_4));
    add_ln32_2_fu_390_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten282_load) + unsigned(ap_const_lv6_1));
    add_ln32_fu_280_p2 <= std_logic_vector(unsigned(select_ln30_1_fu_236_p3) + unsigned(ap_const_lv3_1));
    add_ln33_fu_384_p2 <= std_logic_vector(unsigned(select_ln32_1_fu_292_p3) + unsigned(ap_const_lv3_1));
    add_ln42_fu_554_p2 <= std_logic_vector(unsigned(index_3_cast_fu_550_p1) + unsigned(p_mid2_fu_523_p3));
    add_ln44_fu_565_p2 <= std_logic_vector(unsigned(select_ln32_fu_536_p3) + unsigned(ap_const_lv5_1));
    add_ln_fu_332_p6 <= ((((trunc_ln30_fu_258_p1 & select_ln32_4_fu_324_p3) & ap_const_lv1_0) & empty_77_fu_312_p1) & ap_const_lv1_0);
    and_ln30_fu_274_p2 <= (xor_ln30_fu_262_p2 and icmp_ln33_fu_268_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln30_fu_209_p2)
    begin
        if (((icmp_ln30_fu_209_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_1_fu_94)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_1_load <= i_1_fu_94;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten282_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten282_fu_90)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten282_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten282_load <= indvar_flatten282_fu_90;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten303_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten303_fu_98)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten303_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten303_load <= indvar_flatten303_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_y_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, y_fu_74, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_y_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_y_load <= y_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_z_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, z_1_fu_82)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_z <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_z <= z_1_fu_82;
        end if; 
    end process;

    conv2d_1_V_address0 <= zext_ln38_3_fu_379_p1(9 - 1 downto 0);
    conv2d_1_V_address1 <= zext_ln38_2_fu_368_p1(9 - 1 downto 0);
    conv2d_1_V_address2 <= zext_ln38_1_fu_357_p1(9 - 1 downto 0);
    conv2d_1_V_address3 <= zext_ln38_fu_346_p1(9 - 1 downto 0);

    conv2d_1_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_1_V_ce0 <= ap_const_logic_1;
        else 
            conv2d_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2d_1_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_1_V_ce1 <= ap_const_logic_1;
        else 
            conv2d_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv2d_1_V_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_1_V_ce2 <= ap_const_logic_1;
        else 
            conv2d_1_V_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    conv2d_1_V_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_1_V_ce3 <= ap_const_logic_1;
        else 
            conv2d_1_V_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    empty_76_fu_300_p1 <= add_ln32_fu_280_p2(2 - 1 downto 0);
    empty_77_fu_312_p1 <= select_ln32_1_fu_292_p3(2 - 1 downto 0);
    empty_fu_205_p1 <= ap_sig_allocacmp_z(2 - 1 downto 0);
    icmp_ln1651_4_fu_443_p2 <= "1" when (signed(conv2d_1_V_q2) < signed(select_ln39_fu_435_p3)) else "0";
    icmp_ln1651_5_fu_463_p2 <= "1" when (signed(conv2d_1_V_q1) < signed(select_ln39_1_fu_455_p3)) else "0";
    icmp_ln1651_6_fu_483_p2 <= "1" when (signed(conv2d_1_V_q0) < signed(select_ln39_2_fu_475_p3)) else "0";
    icmp_ln1651_fu_429_p2 <= "1" when (signed(conv2d_1_V_q3) < signed(ap_const_lv32_FFF60000)) else "0";
    icmp_ln30_fu_209_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten303_load = ap_const_lv8_80) else "0";
    icmp_ln32_fu_230_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten282_load = ap_const_lv6_10) else "0";
    icmp_ln33_fu_268_p2 <= "1" when (ap_sig_allocacmp_y_load = ap_const_lv3_4) else "0";
    index_3_cast_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_fu_536_p3),7));
    max_pooling2d_1_V_address0 <= zext_ln43_fu_560_p1(7 - 1 downto 0);

    max_pooling2d_1_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            max_pooling2d_1_V_ce0 <= ap_const_logic_1;
        else 
            max_pooling2d_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pooling2d_1_V_d0 <= select_ln39_3_reg_671;

    max_pooling2d_1_V_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            max_pooling2d_1_V_we0 <= ap_const_logic_1;
        else 
            max_pooling2d_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln32_fu_286_p2 <= (icmp_ln32_fu_230_p2 or and_ln30_fu_274_p2);
    or_ln37_1_fu_362_p2 <= (ap_const_lv9_8 or add_ln_fu_332_p6);
    or_ln37_2_fu_373_p2 <= (ap_const_lv9_9 or add_ln_fu_332_p6);
    or_ln37_fu_351_p2 <= (ap_const_lv9_1 or add_ln_fu_332_p6);
    p_mid2_fu_523_p3 <= (trunc_ln30_reg_640_pp0_iter1_reg & ap_const_lv4_0);
    select_ln30_1_fu_236_p3 <= 
        ap_const_lv3_0 when (icmp_ln32_fu_230_p2(0) = '1') else 
        ap_sig_allocacmp_z;
    select_ln30_2_fu_516_p3 <= 
        ap_const_lv5_0 when (icmp_ln32_reg_634_pp0_iter1_reg(0) = '1') else 
        index_fu_78;
    select_ln30_3_fu_250_p3 <= 
        add_ln30_1_fu_244_p2 when (icmp_ln32_fu_230_p2(0) = '1') else 
        ap_sig_allocacmp_i_1_load;
    select_ln30_4_fu_316_p3 <= 
        ap_const_lv2_0 when (icmp_ln32_fu_230_p2(0) = '1') else 
        empty_fu_205_p1;
    select_ln30_fu_509_p3 <= 
        ap_const_lv5_0 when (icmp_ln32_reg_634_pp0_iter1_reg(0) = '1') else 
        index_2_fu_86;
    select_ln32_1_fu_292_p3 <= 
        ap_const_lv3_0 when (or_ln32_fu_286_p2(0) = '1') else 
        ap_sig_allocacmp_y_load;
    select_ln32_2_fu_543_p3 <= 
        add_ln32_1_fu_530_p2 when (and_ln30_reg_645_pp0_iter1_reg(0) = '1') else 
        select_ln30_fu_509_p3;
    select_ln32_3_fu_304_p3 <= 
        add_ln32_fu_280_p2 when (and_ln30_fu_274_p2(0) = '1') else 
        select_ln30_1_fu_236_p3;
    select_ln32_4_fu_324_p3 <= 
        empty_76_fu_300_p1 when (and_ln30_fu_274_p2(0) = '1') else 
        select_ln30_4_fu_316_p3;
    select_ln32_5_fu_396_p3 <= 
        ap_const_lv6_1 when (icmp_ln32_fu_230_p2(0) = '1') else 
        add_ln32_2_fu_390_p2;
    select_ln32_fu_536_p3 <= 
        add_ln32_1_fu_530_p2 when (and_ln30_reg_645_pp0_iter1_reg(0) = '1') else 
        select_ln30_2_fu_516_p3;
    select_ln39_1_fu_455_p3 <= 
        conv2d_1_V_q2 when (xor_ln1651_fu_449_p2(0) = '1') else 
        select_ln39_fu_435_p3;
    select_ln39_2_fu_475_p3 <= 
        conv2d_1_V_q1 when (xor_ln1651_3_fu_469_p2(0) = '1') else 
        select_ln39_1_fu_455_p3;
    select_ln39_3_fu_495_p3 <= 
        conv2d_1_V_q0 when (xor_ln1651_4_fu_489_p2(0) = '1') else 
        select_ln39_2_fu_475_p3;
    select_ln39_fu_435_p3 <= 
        ap_const_lv32_FFF60000 when (icmp_ln1651_fu_429_p2(0) = '1') else 
        conv2d_1_V_q3;
    trunc_ln30_fu_258_p1 <= select_ln30_3_fu_250_p3(3 - 1 downto 0);
    xor_ln1651_3_fu_469_p2 <= (icmp_ln1651_5_fu_463_p2 xor ap_const_lv1_1);
    xor_ln1651_4_fu_489_p2 <= (icmp_ln1651_6_fu_483_p2 xor ap_const_lv1_1);
    xor_ln1651_fu_449_p2 <= (icmp_ln1651_4_fu_443_p2 xor ap_const_lv1_1);
    xor_ln30_fu_262_p2 <= (icmp_ln32_fu_230_p2 xor ap_const_lv1_1);
    zext_ln38_1_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln37_fu_351_p2),64));
    zext_ln38_2_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln37_1_fu_362_p2),64));
    zext_ln38_3_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln37_2_fu_373_p2),64));
    zext_ln38_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_332_p6),64));
    zext_ln43_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_fu_554_p2),64));
end behav;
