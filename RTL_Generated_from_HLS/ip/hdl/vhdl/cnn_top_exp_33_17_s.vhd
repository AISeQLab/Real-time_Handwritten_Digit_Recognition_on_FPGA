-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_top_exp_33_17_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (32 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (32 downto 0) );
end;


architecture behav of cnn_top_exp_33_17_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv23_78A013 : STD_LOGIC_VECTOR (22 downto 0) := "11110001010000000010011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv46_3FFFFFFFFFFF : STD_LOGIC_VECTOR (45 downto 0) := "1111111111111111111111111111111111111111111111";
    constant ap_const_lv46_0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv33_FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "011111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal f_x_msb_3_table_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_x_msb_3_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_3_table_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_2_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_2_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_2_table_V_q0 : STD_LOGIC_VECTOR (45 downto 0);
    signal exp_x_msb_1_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_x_msb_1_table_V_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table_V_q0 : STD_LOGIC_VECTOR (49 downto 0);
    signal p_Result_s_fu_207_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_774 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_Result_s_reg_774_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_419_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_reg_779 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_msb_ind_3_V_fu_429_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_msb_ind_3_V_reg_784 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln300_8_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_8_reg_804 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_8_reg_804_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_10_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_10_reg_809 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_10_reg_809_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_x_msb_2_3_4_lsb_m_1_V_reg_814 : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_819 : STD_LOGIC_VECTOR (49 downto 0);
    signal zext_ln541_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln541_1_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_2_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln594_fu_195_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_1_fu_215_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_229_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_243_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_257_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_271_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_285_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_299_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_313_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_327_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_fu_341_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_fu_355_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_fu_369_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_l_int_fu_185_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_l_fract_fu_199_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln1653_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1651_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_401_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_21_fu_411_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln176_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overf_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_2_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_3_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_1_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_1_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_2_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_4_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_5_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_7_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_8_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_5_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_6_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_6_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_4_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_7_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_9_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_10_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_9_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_x_msb_2_h_V_fu_525_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln813_2_fu_539_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln813_1_fu_535_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_4_fu_542_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln594_2_fu_548_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_Result_22_fu_552_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal rhs_2_fu_514_p5 : STD_LOGIC_VECTOR (46 downto 0);
    signal r_V_3_fu_568_p0 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_3_fu_568_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal r_V_3_fu_568_p2 : STD_LOGIC_VECTOR (96 downto 0);
    signal trunc_ln1_fu_574_p4 : STD_LOGIC_VECTOR (44 downto 0);
    signal rhs_1_fu_588_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal zext_ln1347_fu_584_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_5_fu_598_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal zext_ln1347_1_fu_604_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_fu_608_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal y_V_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_643_p0 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_fu_643_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_fu_643_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal trunc_ln813_1_fu_649_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln813_fu_659_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal y_l_V_fu_663_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal or_ln300_11_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln288_fu_629_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal y_V_1_fu_668_p4 : STD_LOGIC_VECTOR (45 downto 0);
    signal y_V_3_fu_682_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_15_fu_690_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal overf_1_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_fu_714_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln533_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_fu_706_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_734_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln533_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln533_1_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overf_2_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_756_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal r_V_3_fu_568_p00 : STD_LOGIC_VECTOR (96 downto 0);
    signal r_V_3_fu_568_p10 : STD_LOGIC_VECTOR (96 downto 0);
    signal r_V_fu_643_p00 : STD_LOGIC_VECTOR (99 downto 0);
    signal r_V_fu_643_p10 : STD_LOGIC_VECTOR (99 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component cnn_top_mul_50ns_47ns_97_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (49 downto 0);
        din1 : IN STD_LOGIC_VECTOR (46 downto 0);
        dout : OUT STD_LOGIC_VECTOR (96 downto 0) );
    end component;


    component cnn_top_mul_50ns_50ns_100_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (49 downto 0);
        din1 : IN STD_LOGIC_VECTOR (49 downto 0);
        dout : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component cnn_top_exp_33_17_s_f_x_msb_3_table_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_top_exp_33_17_s_f_x_msb_2_table_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component cnn_top_exp_33_17_s_exp_x_msb_1_table_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;



begin
    f_x_msb_3_table_V_U : component cnn_top_exp_33_17_s_f_x_msb_3_table_V_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_3_table_V_address0,
        ce0 => f_x_msb_3_table_V_ce0,
        q0 => f_x_msb_3_table_V_q0);

    f_x_msb_2_table_V_U : component cnn_top_exp_33_17_s_f_x_msb_2_table_V_ROM_AUTO_1R
    generic map (
        DataWidth => 46,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_2_table_V_address0,
        ce0 => f_x_msb_2_table_V_ce0,
        q0 => f_x_msb_2_table_V_q0);

    exp_x_msb_1_table_V_U : component cnn_top_exp_33_17_s_exp_x_msb_1_table_V_ROM_AUTO_1R
    generic map (
        DataWidth => 50,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table_V_address0,
        ce0 => exp_x_msb_1_table_V_ce0,
        q0 => exp_x_msb_1_table_V_q0);

    mul_50ns_47ns_97_1_1_U166 : component cnn_top_mul_50ns_47ns_97_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 50,
        din1_WIDTH => 47,
        dout_WIDTH => 97)
    port map (
        din0 => r_V_3_fu_568_p0,
        din1 => r_V_3_fu_568_p1,
        dout => r_V_3_fu_568_p2);

    mul_50ns_50ns_100_1_1_U167 : component cnn_top_mul_50ns_50ns_100_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 50,
        din1_WIDTH => 50,
        dout_WIDTH => 100)
    port map (
        din0 => r_V_fu_643_p0,
        din1 => r_V_fu_643_p1,
        dout => r_V_fu_643_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exp_x_msb_1_V_reg_819 <= exp_x_msb_1_table_V_q0;
                exp_x_msb_2_3_4_lsb_m_1_V_reg_814 <= ret_V_fu_608_p2(55 downto 6);
                or_ln300_10_reg_809 <= or_ln300_10_fu_508_p2;
                or_ln300_10_reg_809_pp0_iter1_reg <= or_ln300_10_reg_809;
                or_ln300_8_reg_804 <= or_ln300_8_fu_496_p2;
                or_ln300_8_reg_804_pp0_iter1_reg <= or_ln300_8_reg_804;
                p_Result_s_reg_774 <= x(32 downto 32);
                p_Result_s_reg_774_pp0_iter1_reg <= p_Result_s_reg_774;
                tmp_20_reg_779 <= x(12 downto 5);
                x_msb_ind_3_V_reg_784 <= x_msb_ind_3_V_fu_429_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln300_fu_395_p2 <= (icmp_ln1653_fu_383_p2 and icmp_ln1651_fu_389_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv33_FFFFFFFF when (overf_2_fu_750_p2(0) = '1') else 
        tmp_s_fu_756_p4;
    exp_x_msb_1_table_V_address0 <= zext_ln541_2_fu_443_p1(8 - 1 downto 0);

    exp_x_msb_1_table_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_2_h_V_fu_525_p4 <= f_x_msb_2_table_V_q0(45 downto 41);
    f_x_msb_2_table_V_address0 <= zext_ln541_1_fu_438_p1(8 - 1 downto 0);

    f_x_msb_2_table_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_3_table_V_address0 <= zext_ln541_fu_433_p1(5 - 1 downto 0);

    f_x_msb_3_table_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1651_fu_389_p2 <= "1" when (unsigned(x_l_fract_fu_199_p3) > unsigned(ap_const_lv23_78A013)) else "0";
    icmp_ln1653_fu_383_p2 <= "1" when (x_l_int_fu_185_p4 = ap_const_lv5_F) else "0";
    icmp_ln533_fu_744_p2 <= "0" when (tmp_19_fu_734_p4 = ap_const_lv3_0) else "1";
    or_ln300_10_fu_508_p2 <= (or_ln300_9_fu_502_p2 or and_ln300_fu_395_p2);
    or_ln300_11_fu_678_p2 <= (or_ln300_8_reg_804_pp0_iter1_reg or or_ln300_10_reg_809_pp0_iter1_reg);
    or_ln300_1_fu_454_p2 <= (xor_ln176_3_fu_279_p2 or xor_ln176_2_fu_265_p2);
    or_ln300_2_fu_460_p2 <= (xor_ln176_1_fu_251_p2 or or_ln300_1_fu_454_p2);
    or_ln300_3_fu_466_p2 <= (or_ln300_fu_448_p2 or or_ln300_2_fu_460_p2);
    or_ln300_4_fu_472_p2 <= (xor_ln176_5_fu_307_p2 or xor_ln176_4_fu_293_p2);
    or_ln300_5_fu_478_p2 <= (xor_ln176_8_fu_349_p2 or xor_ln176_7_fu_335_p2);
    or_ln300_6_fu_484_p2 <= (xor_ln176_6_fu_321_p2 or or_ln300_5_fu_478_p2);
    or_ln300_7_fu_490_p2 <= (or_ln300_6_fu_484_p2 or or_ln300_4_fu_472_p2);
    or_ln300_8_fu_496_p2 <= (or_ln300_7_fu_490_p2 or or_ln300_3_fu_466_p2);
    or_ln300_9_fu_502_p2 <= (xor_ln176_9_fu_363_p2 or xor_ln176_10_fu_377_p2);
    or_ln300_fu_448_p2 <= (xor_ln176_fu_237_p2 or overf_fu_223_p2);
    or_ln533_1_fu_728_p2 <= (p_Result_19_fu_706_p3 or or_ln533_fu_722_p2);
    or_ln533_fu_722_p2 <= (p_Result_20_fu_714_p3 or overf_1_fu_700_p2);
    overf_1_fu_700_p2 <= "0" when (tmp_15_fu_690_p4 = ap_const_lv2_0) else "1";
    overf_2_fu_750_p2 <= (or_ln533_1_fu_728_p2 or icmp_ln533_fu_744_p2);
    overf_fu_223_p2 <= (p_Result_s_fu_207_p3 xor p_Result_1_fu_215_p3);
    p_Result_10_fu_341_p3 <= x(29 downto 29);
    p_Result_11_fu_355_p3 <= x(30 downto 30);
    p_Result_12_fu_369_p3 <= x(31 downto 31);
    p_Result_19_fu_706_p3 <= y_V_3_fu_682_p3(43 downto 43);
    p_Result_1_fu_215_p3 <= x(20 downto 20);
    p_Result_20_fu_714_p3 <= y_V_3_fu_682_p3(42 downto 42);
    p_Result_21_fu_411_p3 <= (p_Result_s_fu_207_p3 & tmp_fu_401_p4);
    p_Result_22_fu_552_p3 <= (ret_V_4_fu_542_p2 & trunc_ln594_2_fu_548_p1);
    p_Result_2_fu_229_p3 <= x(21 downto 21);
    p_Result_3_fu_243_p3 <= x(22 downto 22);
    p_Result_4_fu_257_p3 <= x(23 downto 23);
    p_Result_5_fu_271_p3 <= x(24 downto 24);
    p_Result_6_fu_285_p3 <= x(25 downto 25);
    p_Result_7_fu_299_p3 <= x(26 downto 26);
    p_Result_8_fu_313_p3 <= x(27 downto 27);
    p_Result_9_fu_327_p3 <= x(28 downto 28);
    p_Result_s_fu_207_p3 <= x(32 downto 32);
    r_V_3_fu_568_p0 <= r_V_3_fu_568_p00(50 - 1 downto 0);
    r_V_3_fu_568_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_22_fu_552_p3),97));
    r_V_3_fu_568_p1 <= r_V_3_fu_568_p10(47 - 1 downto 0);
    r_V_3_fu_568_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_2_fu_514_p5),97));
    r_V_fu_643_p0 <= r_V_fu_643_p00(50 - 1 downto 0);
    r_V_fu_643_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_3_4_lsb_m_1_V_reg_814),100));
    r_V_fu_643_p1 <= r_V_fu_643_p10(50 - 1 downto 0);
    r_V_fu_643_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_1_V_reg_819),100));
    ret_V_4_fu_542_p2 <= std_logic_vector(unsigned(zext_ln813_2_fu_539_p1) + unsigned(zext_ln813_1_fu_535_p1));
    ret_V_5_fu_598_p2 <= std_logic_vector(unsigned(rhs_1_fu_588_p4) + unsigned(zext_ln1347_fu_584_p1));
    ret_V_fu_608_p2 <= std_logic_vector(unsigned(ret_V_5_fu_598_p2) + unsigned(zext_ln1347_1_fu_604_p1));
    rhs_1_fu_588_p4 <= ((ret_V_4_fu_542_p2 & trunc_ln594_2_fu_548_p1) & ap_const_lv6_0);
    rhs_2_fu_514_p5 <= (((x_msb_ind_3_V_reg_784 & ap_const_lv7_0) & f_x_msb_3_table_V_q0) & ap_const_lv3_0);
    select_ln288_fu_629_p3 <= 
        ap_const_lv46_3FFFFFFFFFFF when (y_V_fu_624_p2(0) = '1') else 
        ap_const_lv46_0;
    tmp_15_fu_690_p4 <= y_V_3_fu_682_p3(45 downto 44);
    tmp_19_fu_734_p4 <= y_V_3_fu_682_p3(41 downto 39);
    tmp_20_fu_419_p4 <= x(12 downto 5);
    tmp_fu_401_p4 <= x(19 downto 13);
    tmp_s_fu_756_p4 <= y_V_3_fu_682_p3(39 downto 7);
    trunc_ln1_fu_574_p4 <= r_V_3_fu_568_p2(96 downto 52);
    trunc_ln594_2_fu_548_p1 <= f_x_msb_2_table_V_q0(41 - 1 downto 0);
    trunc_ln594_fu_195_p1 <= x(16 - 1 downto 0);
    trunc_ln813_1_fu_649_p4 <= r_V_fu_643_p2(99 downto 52);
    x_l_fract_fu_199_p3 <= (trunc_ln594_fu_195_p1 & ap_const_lv7_0);
    x_l_int_fu_185_p4 <= x(20 downto 16);
    x_msb_ind_3_V_fu_429_p1 <= x(5 - 1 downto 0);
    xor_ln176_10_fu_377_p2 <= (p_Result_s_fu_207_p3 xor p_Result_12_fu_369_p3);
    xor_ln176_1_fu_251_p2 <= (p_Result_s_fu_207_p3 xor p_Result_3_fu_243_p3);
    xor_ln176_2_fu_265_p2 <= (p_Result_s_fu_207_p3 xor p_Result_4_fu_257_p3);
    xor_ln176_3_fu_279_p2 <= (p_Result_s_fu_207_p3 xor p_Result_5_fu_271_p3);
    xor_ln176_4_fu_293_p2 <= (p_Result_s_fu_207_p3 xor p_Result_6_fu_285_p3);
    xor_ln176_5_fu_307_p2 <= (p_Result_s_fu_207_p3 xor p_Result_7_fu_299_p3);
    xor_ln176_6_fu_321_p2 <= (p_Result_s_fu_207_p3 xor p_Result_8_fu_313_p3);
    xor_ln176_7_fu_335_p2 <= (p_Result_s_fu_207_p3 xor p_Result_9_fu_327_p3);
    xor_ln176_8_fu_349_p2 <= (p_Result_s_fu_207_p3 xor p_Result_10_fu_341_p3);
    xor_ln176_9_fu_363_p2 <= (p_Result_s_fu_207_p3 xor p_Result_11_fu_355_p3);
    xor_ln176_fu_237_p2 <= (p_Result_s_fu_207_p3 xor p_Result_2_fu_229_p3);
    y_V_1_fu_668_p4 <= y_l_V_fu_663_p2(49 downto 4);
    y_V_3_fu_682_p3 <= 
        select_ln288_fu_629_p3 when (or_ln300_11_fu_678_p2(0) = '1') else 
        y_V_1_fu_668_p4;
    y_V_fu_624_p2 <= (p_Result_s_reg_774_pp0_iter1_reg xor ap_const_lv1_1);
    y_l_V_fu_663_p2 <= std_logic_vector(unsigned(exp_x_msb_1_V_reg_819) + unsigned(zext_ln813_fu_659_p1));
    zext_ln1347_1_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_2_fu_514_p5),56));
    zext_ln1347_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1_fu_574_p4),56));
    zext_ln541_1_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_419_p4),64));
    zext_ln541_2_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_21_fu_411_p3),64));
    zext_ln541_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_msb_ind_3_V_fu_429_p1),64));
    zext_ln813_1_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_x_msb_2_h_V_fu_525_p4),9));
    zext_ln813_2_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_reg_779),9));
    zext_ln813_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln813_1_fu_649_p4),50));
end behav;
