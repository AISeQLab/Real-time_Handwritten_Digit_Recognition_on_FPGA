-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_top_cnn_top_Pipeline_VITIS_LOOP_7_1_VITIS_LOOP_9_2_VITIS_LOOP_10_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv2d_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv2d_V_ce0 : OUT STD_LOGIC;
    conv2d_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2d_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv2d_V_ce1 : OUT STD_LOGIC;
    conv2d_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2d_V_address2 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv2d_V_ce2 : OUT STD_LOGIC;
    conv2d_V_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2d_V_address3 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv2d_V_ce3 : OUT STD_LOGIC;
    conv2d_V_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pooling2d_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    max_pooling2d_V_ce0 : OUT STD_LOGIC;
    max_pooling2d_V_we0 : OUT STD_LOGIC;
    max_pooling2d_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cnn_top_cnn_top_Pipeline_VITIS_LOOP_7_1_VITIS_LOOP_9_2_VITIS_LOOP_10_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_18 : STD_LOGIC_VECTOR (11 downto 0) := "000000011000";
    constant ap_const_lv12_19 : STD_LOGIC_VECTOR (11 downto 0) := "000000011001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_FFF60000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111101100000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln7_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln9_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_777_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln7_fu_336_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln7_reg_783 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln7_reg_783_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln7_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln7_reg_789 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln7_reg_789_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_3_fu_617_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln16_3_reg_815 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln15_1_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_2_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_3_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_fu_703_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_80 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln10_fu_506_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_y_load : STD_LOGIC_VECTOR (3 downto 0);
    signal index_1_fu_84 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln21_1_fu_708_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_fu_88 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln9_4_fu_438_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_z_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal index_fu_92 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln9_3_fu_680_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten151_fu_96 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln9_5_fu_518_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten151_load : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_100 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln7_4_fu_328_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten183_fu_104 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln7_fu_272_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten183_load : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_fu_214_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl9_fu_218_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_230_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_fu_242_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl10_cast_fu_238_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl11_cast_fu_250_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl9_cast_fu_226_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_72_fu_254_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln7_2_fu_298_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_74_fu_304_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl9_mid1_fu_308_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln7_3_fu_316_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln7_3_fu_340_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln14_3_fu_260_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln10_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln7_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln7_1_fu_290_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln9_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln9_fu_370_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl10_mid1_fu_390_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl11_mid1_fu_402_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl10_cast_mid1_fu_398_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl11_cast_mid1_fu_410_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln7_fu_324_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid1149_fu_414_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln14_4_fu_420_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln7_5_fu_344_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln9_2_fu_426_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln9_1_fu_382_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp5_fu_446_p5 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln14_fu_458_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln9_2_cast_fu_434_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln14_fu_462_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln14_fu_473_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln14_1_fu_484_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln14_2_fu_495_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln9_2_fu_512_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1651_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_fu_557_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1651_1_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1651_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_1_fu_577_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1651_2_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1651_1_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_2_fu_597_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1651_3_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1651_2_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl6_cast_mid2_v_fu_645_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln9_mid2_v_fu_656_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln7_fu_631_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln9_1_fu_667_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln7_2_fu_638_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln7_2_fu_663_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln9_fu_673_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln19_1_fu_687_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln19_fu_693_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln7_1_fu_652_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln19_fu_697_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component cnn_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln7_fu_266_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_100 <= select_ln7_4_fu_328_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_100 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    index_1_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    index_1_fu_84 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    index_1_fu_84 <= add_ln21_1_fu_708_p2;
                end if;
            end if; 
        end if;
    end process;

    index_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    index_fu_92 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    index_fu_92 <= select_ln9_3_fu_680_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten151_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln7_fu_266_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten151_fu_96 <= select_ln9_5_fu_518_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten151_fu_96 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten183_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln7_fu_266_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten183_fu_104 <= add_ln7_fu_272_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten183_fu_104 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    y_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln7_fu_266_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    y_fu_80 <= add_ln10_fu_506_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_80 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    z_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln7_fu_266_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    z_fu_88 <= select_ln9_4_fu_438_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    z_fu_88 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_fu_266_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln7_reg_789 <= and_ln7_fu_364_p2;
                icmp_ln9_reg_777 <= icmp_ln9_fu_284_p2;
                trunc_ln7_reg_783 <= trunc_ln7_fu_336_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln7_reg_789_pp0_iter1_reg <= and_ln7_reg_789;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln9_reg_777_pp0_iter1_reg <= icmp_ln9_reg_777;
                select_ln16_3_reg_815 <= select_ln16_3_fu_617_p3;
                trunc_ln7_reg_783_pp0_iter1_reg <= trunc_ln7_reg_783;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln10_fu_506_p2 <= std_logic_vector(unsigned(select_ln9_1_fu_382_p3) + unsigned(ap_const_lv4_1));
    add_ln14_1_fu_484_p2 <= std_logic_vector(unsigned(add_ln14_fu_462_p2) + unsigned(ap_const_lv12_18));
    add_ln14_2_fu_495_p2 <= std_logic_vector(unsigned(add_ln14_fu_462_p2) + unsigned(ap_const_lv12_19));
    add_ln14_3_fu_260_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_226_p1) + unsigned(empty_72_fu_254_p2));
    add_ln14_4_fu_420_p2 <= std_logic_vector(unsigned(zext_ln7_fu_324_p1) + unsigned(p_mid1149_fu_414_p2));
    add_ln14_fu_462_p2 <= std_logic_vector(unsigned(zext_ln14_fu_458_p1) + unsigned(select_ln9_2_cast_fu_434_p1));
    add_ln19_1_fu_687_p2 <= std_logic_vector(unsigned(zext_ln7_2_fu_663_p1) + unsigned(select_ln9_fu_673_p3));
    add_ln19_fu_697_p2 <= std_logic_vector(unsigned(zext_ln19_fu_693_p1) + unsigned(zext_ln7_1_fu_652_p1));
    add_ln21_1_fu_708_p2 <= std_logic_vector(unsigned(select_ln9_fu_673_p3) + unsigned(ap_const_lv8_1));
    add_ln7_2_fu_298_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_3) + unsigned(ap_const_lv3_1));
    add_ln7_fu_272_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten183_load) + unsigned(ap_const_lv10_1));
    add_ln9_1_fu_667_p2 <= std_logic_vector(unsigned(select_ln7_fu_631_p3) + unsigned(ap_const_lv8_C));
    add_ln9_2_fu_512_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten151_load) + unsigned(ap_const_lv8_1));
    add_ln9_fu_370_p2 <= std_logic_vector(unsigned(select_ln7_1_fu_290_p3) + unsigned(ap_const_lv4_1));
    and_ln7_fu_364_p2 <= (xor_ln7_fu_352_p2 and icmp_ln10_fu_358_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln7_fu_266_p2)
    begin
        if (((icmp_ln7_fu_266_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_100)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten151_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten151_fu_96)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten151_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten151_load <= indvar_flatten151_fu_96;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten183_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten183_fu_104)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten183_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten183_load <= indvar_flatten183_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_y_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, y_fu_80, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_y_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_y_load <= y_fu_80;
        end if; 
    end process;


    ap_sig_allocacmp_z_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, z_fu_88)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_z_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_z_1 <= z_fu_88;
        end if; 
    end process;

    conv2d_V_address0 <= zext_ln15_3_fu_501_p1(12 - 1 downto 0);
    conv2d_V_address1 <= zext_ln15_2_fu_490_p1(12 - 1 downto 0);
    conv2d_V_address2 <= zext_ln15_1_fu_479_p1(12 - 1 downto 0);
    conv2d_V_address3 <= zext_ln15_fu_468_p1(12 - 1 downto 0);

    conv2d_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_V_ce0 <= ap_const_logic_1;
        else 
            conv2d_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2d_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_V_ce1 <= ap_const_logic_1;
        else 
            conv2d_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv2d_V_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_V_ce2 <= ap_const_logic_1;
        else 
            conv2d_V_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    conv2d_V_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv2d_V_ce3 <= ap_const_logic_1;
        else 
            conv2d_V_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    empty_72_fu_254_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_238_p1) - unsigned(p_shl11_cast_fu_250_p1));
    empty_74_fu_304_p1 <= add_ln7_2_fu_298_p2(2 - 1 downto 0);
    empty_fu_214_p1 <= ap_sig_allocacmp_i_3(2 - 1 downto 0);
    icmp_ln10_fu_358_p2 <= "1" when (ap_sig_allocacmp_y_load = ap_const_lv4_C) else "0";
    icmp_ln1651_1_fu_565_p2 <= "1" when (signed(conv2d_V_q2) < signed(select_ln16_fu_557_p3)) else "0";
    icmp_ln1651_2_fu_585_p2 <= "1" when (signed(conv2d_V_q1) < signed(select_ln16_1_fu_577_p3)) else "0";
    icmp_ln1651_3_fu_605_p2 <= "1" when (signed(conv2d_V_q0) < signed(select_ln16_2_fu_597_p3)) else "0";
    icmp_ln1651_fu_551_p2 <= "1" when (signed(conv2d_V_q3) < signed(ap_const_lv32_FFF60000)) else "0";
    icmp_ln7_fu_266_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten183_load = ap_const_lv10_240) else "0";
    icmp_ln9_fu_284_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten151_load = ap_const_lv8_90) else "0";
    max_pooling2d_V_address0 <= zext_ln20_fu_703_p1(10 - 1 downto 0);

    max_pooling2d_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            max_pooling2d_V_ce0 <= ap_const_logic_1;
        else 
            max_pooling2d_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pooling2d_V_d0 <= select_ln16_3_reg_815;

    max_pooling2d_V_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            max_pooling2d_V_we0 <= ap_const_logic_1;
        else 
            max_pooling2d_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln14_fu_473_p2 <= (ap_const_lv12_1 or add_ln14_fu_462_p2);
    or_ln9_fu_376_p2 <= (icmp_ln9_fu_284_p2 or and_ln7_fu_364_p2);
    p_mid1149_fu_414_p2 <= std_logic_vector(unsigned(p_shl10_cast_mid1_fu_398_p1) - unsigned(p_shl11_cast_mid1_fu_410_p1));
    p_shl10_cast_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_230_p3),11));
    p_shl10_cast_mid1_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl10_mid1_fu_390_p3),11));
    p_shl10_mid1_fu_390_p3 <= (add_ln9_fu_370_p2 & ap_const_lv6_0);
    p_shl11_cast_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_242_p3),11));
    p_shl11_cast_mid1_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl11_mid1_fu_402_p3),11));
    p_shl11_mid1_fu_402_p3 <= (add_ln9_fu_370_p2 & ap_const_lv4_0);
    p_shl1_fu_242_p3 <= (ap_sig_allocacmp_z_1 & ap_const_lv4_0);
    p_shl6_cast_mid2_v_fu_645_p3 <= (trunc_ln7_reg_783_pp0_iter1_reg & ap_const_lv7_0);
    p_shl9_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl9_fu_218_p3),11));
    p_shl9_fu_218_p3 <= (empty_fu_214_p1 & ap_const_lv6_0);
    p_shl9_mid1_fu_308_p3 <= (empty_74_fu_304_p1 & ap_const_lv6_0);
    p_shl_fu_230_p3 <= (ap_sig_allocacmp_z_1 & ap_const_lv6_0);
    select_ln16_1_fu_577_p3 <= 
        conv2d_V_q2 when (xor_ln1651_fu_571_p2(0) = '1') else 
        select_ln16_fu_557_p3;
    select_ln16_2_fu_597_p3 <= 
        conv2d_V_q1 when (xor_ln1651_1_fu_591_p2(0) = '1') else 
        select_ln16_1_fu_577_p3;
    select_ln16_3_fu_617_p3 <= 
        conv2d_V_q0 when (xor_ln1651_2_fu_611_p2(0) = '1') else 
        select_ln16_2_fu_597_p3;
    select_ln16_fu_557_p3 <= 
        ap_const_lv32_FFF60000 when (icmp_ln1651_fu_551_p2(0) = '1') else 
        conv2d_V_q3;
    select_ln7_1_fu_290_p3 <= 
        ap_const_lv4_0 when (icmp_ln9_fu_284_p2(0) = '1') else 
        ap_sig_allocacmp_z_1;
    select_ln7_2_fu_638_p3 <= 
        ap_const_lv8_0 when (icmp_ln9_reg_777_pp0_iter1_reg(0) = '1') else 
        index_1_fu_84;
    select_ln7_3_fu_316_p3 <= 
        p_shl9_mid1_fu_308_p3 when (icmp_ln9_fu_284_p2(0) = '1') else 
        p_shl9_fu_218_p3;
    select_ln7_4_fu_328_p3 <= 
        add_ln7_2_fu_298_p2 when (icmp_ln9_fu_284_p2(0) = '1') else 
        ap_sig_allocacmp_i_3;
    select_ln7_5_fu_344_p3 <= 
        zext_ln7_3_fu_340_p1 when (icmp_ln9_fu_284_p2(0) = '1') else 
        add_ln14_3_fu_260_p2;
    select_ln7_fu_631_p3 <= 
        ap_const_lv8_0 when (icmp_ln9_reg_777_pp0_iter1_reg(0) = '1') else 
        index_fu_92;
    select_ln9_1_fu_382_p3 <= 
        ap_const_lv4_0 when (or_ln9_fu_376_p2(0) = '1') else 
        ap_sig_allocacmp_y_load;
        select_ln9_2_cast_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln9_2_fu_426_p3),12));

    select_ln9_2_fu_426_p3 <= 
        add_ln14_4_fu_420_p2 when (and_ln7_fu_364_p2(0) = '1') else 
        select_ln7_5_fu_344_p3;
    select_ln9_3_fu_680_p3 <= 
        add_ln9_1_fu_667_p2 when (and_ln7_reg_789_pp0_iter1_reg(0) = '1') else 
        select_ln7_fu_631_p3;
    select_ln9_4_fu_438_p3 <= 
        add_ln9_fu_370_p2 when (and_ln7_fu_364_p2(0) = '1') else 
        select_ln7_1_fu_290_p3;
    select_ln9_5_fu_518_p3 <= 
        ap_const_lv8_1 when (icmp_ln9_fu_284_p2(0) = '1') else 
        add_ln9_2_fu_512_p2;
    select_ln9_fu_673_p3 <= 
        add_ln9_1_fu_667_p2 when (and_ln7_reg_789_pp0_iter1_reg(0) = '1') else 
        select_ln7_2_fu_638_p3;
    tmp5_fu_446_p5 <= (((trunc_ln7_fu_336_p1 & ap_const_lv4_0) & select_ln9_1_fu_382_p3) & ap_const_lv1_0);
    trunc_ln7_fu_336_p1 <= select_ln7_4_fu_328_p3(2 - 1 downto 0);
    xor_ln1651_1_fu_591_p2 <= (icmp_ln1651_2_fu_585_p2 xor ap_const_lv1_1);
    xor_ln1651_2_fu_611_p2 <= (icmp_ln1651_3_fu_605_p2 xor ap_const_lv1_1);
    xor_ln1651_fu_571_p2 <= (icmp_ln1651_1_fu_565_p2 xor ap_const_lv1_1);
    xor_ln7_fu_352_p2 <= (icmp_ln9_fu_284_p2 xor ap_const_lv1_1);
    zext_ln14_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_446_p5),12));
    zext_ln15_1_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_fu_473_p2),64));
    zext_ln15_2_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_1_fu_484_p2),64));
    zext_ln15_3_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_2_fu_495_p2),64));
    zext_ln15_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_fu_462_p2),64));
    zext_ln19_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_1_fu_687_p2),10));
    zext_ln20_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_fu_697_p2),64));
    zext_ln7_1_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl6_cast_mid2_v_fu_645_p3),10));
    zext_ln7_2_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln9_mid2_v_fu_656_p3),8));
    zext_ln7_3_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl9_mid1_fu_308_p3),11));
    zext_ln7_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln7_3_fu_316_p3),11));
    zext_ln9_mid2_v_fu_656_p3 <= (trunc_ln7_reg_783_pp0_iter1_reg & ap_const_lv4_0);
end behav;
