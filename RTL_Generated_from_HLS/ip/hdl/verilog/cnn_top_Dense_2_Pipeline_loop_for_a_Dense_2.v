// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cnn_top_Dense_2_Pipeline_loop_for_a_Dense_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RFIFONUM,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        weight,
        zext_ln1271,
        zext_ln1271_31,
        zext_ln1271_32,
        zext_ln1271_33,
        zext_ln1271_34,
        zext_ln1271_35,
        zext_ln1271_36,
        zext_ln1271_37,
        zext_ln1271_38,
        zext_ln1271_39,
        zext_ln1271_40,
        zext_ln1271_41,
        zext_ln1271_42,
        zext_ln1271_43,
        zext_ln1271_44,
        zext_ln52,
        bias,
        out_Dense_V_address0,
        out_Dense_V_ce0,
        out_Dense_V_we0,
        out_Dense_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 17'd1;
parameter    ap_ST_fsm_pp0_stage1 = 17'd2;
parameter    ap_ST_fsm_pp0_stage2 = 17'd4;
parameter    ap_ST_fsm_pp0_stage3 = 17'd8;
parameter    ap_ST_fsm_pp0_stage4 = 17'd16;
parameter    ap_ST_fsm_pp0_stage5 = 17'd32;
parameter    ap_ST_fsm_pp0_stage6 = 17'd64;
parameter    ap_ST_fsm_pp0_stage7 = 17'd128;
parameter    ap_ST_fsm_pp0_stage8 = 17'd256;
parameter    ap_ST_fsm_pp0_stage9 = 17'd512;
parameter    ap_ST_fsm_pp0_stage10 = 17'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 17'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 17'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 17'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 17'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 17'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [63:0] m_axi_gmem1_AWADDR;
output  [0:0] m_axi_gmem1_AWID;
output  [31:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [0:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [31:0] m_axi_gmem1_WDATA;
output  [3:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [0:0] m_axi_gmem1_WID;
output  [0:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [63:0] m_axi_gmem1_ARADDR;
output  [0:0] m_axi_gmem1_ARID;
output  [31:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [0:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [31:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [0:0] m_axi_gmem1_RID;
input  [8:0] m_axi_gmem1_RFIFONUM;
input  [0:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [0:0] m_axi_gmem1_BID;
input  [0:0] m_axi_gmem1_BUSER;
input  [63:0] weight;
input  [30:0] zext_ln1271;
input  [30:0] zext_ln1271_31;
input  [30:0] zext_ln1271_32;
input  [30:0] zext_ln1271_33;
input  [30:0] zext_ln1271_34;
input  [30:0] zext_ln1271_35;
input  [30:0] zext_ln1271_36;
input  [30:0] zext_ln1271_37;
input  [30:0] zext_ln1271_38;
input  [30:0] zext_ln1271_39;
input  [30:0] zext_ln1271_40;
input  [30:0] zext_ln1271_41;
input  [30:0] zext_ln1271_42;
input  [30:0] zext_ln1271_43;
input  [30:0] zext_ln1271_44;
input  [30:0] zext_ln52;
input  [63:0] bias;
output  [3:0] out_Dense_V_address0;
output   out_Dense_V_ce0;
output   out_Dense_V_we0;
output  [31:0] out_Dense_V_d0;

reg ap_idle;
reg m_axi_gmem1_ARVALID;
reg[63:0] m_axi_gmem1_ARADDR;
reg m_axi_gmem1_RREADY;
reg out_Dense_V_ce0;
reg out_Dense_V_we0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage16;
reg   [0:0] icmp_ln52_reg_1890;
reg    ap_block_state17_pp0_stage16_iter0;
reg    ap_block_state17_io;
reg    ap_block_pp0_stage16_subdone;
reg    ap_condition_exit_pp0_iter0_stage16;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem1_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    gmem1_blk_n_R;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_pp0_stage14;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_pp0_stage15;
wire    ap_block_pp0_stage16;
wire    ap_block_pp0_stage0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state18_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [47:0] zext_ln52_cast_fu_475_p1;
reg   [47:0] zext_ln52_cast_reg_1799;
wire   [47:0] zext_ln1271_44_cast_fu_479_p1;
reg   [47:0] zext_ln1271_44_cast_reg_1804;
wire   [47:0] zext_ln1271_43_cast_fu_483_p1;
reg   [47:0] zext_ln1271_43_cast_reg_1809;
wire   [47:0] zext_ln1271_42_cast_fu_487_p1;
reg   [47:0] zext_ln1271_42_cast_reg_1814;
wire   [47:0] zext_ln1271_41_cast_fu_491_p1;
reg   [47:0] zext_ln1271_41_cast_reg_1819;
wire   [47:0] zext_ln1271_40_cast_fu_495_p1;
reg   [47:0] zext_ln1271_40_cast_reg_1824;
wire   [47:0] zext_ln1271_39_cast_fu_499_p1;
reg   [47:0] zext_ln1271_39_cast_reg_1829;
wire   [47:0] zext_ln1271_38_cast_fu_503_p1;
reg   [47:0] zext_ln1271_38_cast_reg_1834;
wire   [47:0] zext_ln1271_37_cast_fu_507_p1;
reg   [47:0] zext_ln1271_37_cast_reg_1839;
wire   [47:0] zext_ln1271_36_cast_fu_511_p1;
reg   [47:0] zext_ln1271_36_cast_reg_1844;
wire   [47:0] zext_ln1271_35_cast_fu_515_p1;
reg   [47:0] zext_ln1271_35_cast_reg_1849;
wire   [47:0] zext_ln1271_34_cast_fu_519_p1;
reg   [47:0] zext_ln1271_34_cast_reg_1854;
wire   [47:0] zext_ln1271_33_cast_fu_523_p1;
reg   [47:0] zext_ln1271_33_cast_reg_1859;
wire   [47:0] zext_ln1271_32_cast_fu_527_p1;
reg   [47:0] zext_ln1271_32_cast_reg_1864;
wire   [47:0] zext_ln1271_31_cast_fu_531_p1;
reg   [47:0] zext_ln1271_31_cast_reg_1869;
wire   [47:0] zext_ln1271_cast_fu_535_p1;
reg   [47:0] zext_ln1271_cast_reg_1874;
reg   [3:0] i_5_reg_1879;
reg   [3:0] i_5_reg_1879_pp0_iter1_reg;
wire   [0:0] icmp_ln52_fu_547_p2;
reg   [63:0] gmem1_addr_34_reg_1894;
reg   [63:0] gmem1_addr_reg_1900;
wire   [4:0] zext_ln1273_35_fu_617_p1;
reg   [4:0] zext_ln1273_35_reg_1906;
wire    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_state2_io;
reg    ap_block_state19_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [63:0] gmem1_addr_35_reg_1912;
reg   [63:0] gmem1_addr_36_reg_1918;
wire    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_state3_io;
reg    ap_block_state20_pp0_stage2_iter1;
reg    ap_block_pp0_stage2_11001;
wire   [5:0] trunc_ln58_cast5_fu_705_p1;
reg   [5:0] trunc_ln58_cast5_reg_1924;
wire    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_state4_io;
reg    ap_block_state21_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_11001;
reg   [63:0] gmem1_addr_37_reg_1931;
reg   [63:0] gmem1_addr_38_reg_1937;
wire    ap_block_state5_pp0_stage4_iter0;
reg    ap_block_state5_io;
reg    ap_block_state22_pp0_stage4_iter1;
reg    ap_block_pp0_stage4_11001;
reg   [63:0] gmem1_addr_39_reg_1943;
wire    ap_block_state6_pp0_stage5_iter0;
reg    ap_block_state6_io;
reg    ap_block_state23_pp0_stage5_iter1;
reg    ap_block_pp0_stage5_11001;
wire   [6:0] zext_ln1273_34_fu_839_p1;
reg   [6:0] zext_ln1273_34_reg_1949;
wire    ap_block_state7_pp0_stage6_iter0;
reg    ap_block_state7_io;
reg    ap_block_state24_pp0_stage6_iter1;
reg    ap_block_pp0_stage6_11001;
reg   [63:0] gmem1_addr_40_reg_1955;
reg   [63:0] gmem1_addr_41_reg_1961;
wire    ap_block_state8_pp0_stage7_iter0;
reg    ap_block_state8_io;
reg    ap_block_state25_pp0_stage7_iter1;
reg    ap_block_pp0_stage7_11001;
reg  signed [31:0] gmem1_addr_34_read_reg_1967;
reg    ap_block_state9_pp0_stage8_iter0;
reg    ap_block_state9_io;
wire    ap_block_state26_pp0_stage8_iter1;
reg    ap_block_pp0_stage8_11001;
reg   [63:0] gmem1_addr_42_reg_1972;
reg  signed [31:0] gmem1_addr_35_read_reg_1978;
reg    ap_block_state10_pp0_stage9_iter0;
reg    ap_block_state10_io;
reg    ap_block_pp0_stage9_11001;
reg   [31:0] tmp_reg_1983;
reg   [63:0] gmem1_addr_43_reg_1988;
reg  signed [31:0] gmem1_addr_36_read_reg_1994;
reg    ap_block_state11_pp0_stage10_iter0;
reg    ap_block_state11_io;
reg    ap_block_pp0_stage10_11001;
reg   [31:0] tmp_s_reg_1999;
reg   [63:0] gmem1_addr_44_reg_2004;
reg  signed [31:0] gmem1_addr_37_read_reg_2010;
reg    ap_block_state12_pp0_stage11_iter0;
reg    ap_block_state12_io;
reg    ap_block_pp0_stage11_11001;
reg   [31:0] tmp_63_reg_2015;
reg   [63:0] gmem1_addr_45_reg_2020;
wire   [7:0] zext_ln1273_fu_1179_p1;
reg   [7:0] zext_ln1273_reg_2026;
reg    ap_block_state13_pp0_stage12_iter0;
reg    ap_block_state13_io;
reg    ap_block_pp0_stage12_11001;
reg  signed [31:0] gmem1_addr_38_read_reg_2033;
reg   [31:0] tmp_64_reg_2038;
reg   [63:0] gmem1_addr_46_reg_2043;
reg  signed [31:0] gmem1_addr_39_read_reg_2049;
reg    ap_block_state14_pp0_stage13_iter0;
reg    ap_block_state14_io;
reg    ap_block_pp0_stage13_11001;
reg   [31:0] tmp_66_reg_2054;
reg   [63:0] gmem1_addr_47_reg_2059;
reg  signed [31:0] gmem1_addr_40_read_reg_2065;
reg    ap_block_state15_pp0_stage14_iter0;
reg    ap_block_state15_io;
reg    ap_block_pp0_stage14_11001;
reg   [31:0] tmp_67_reg_2070;
reg   [63:0] gmem1_addr_48_reg_2075;
reg   [63:0] gmem1_addr_49_reg_2081;
reg  signed [31:0] gmem1_addr_41_read_reg_2087;
reg    ap_block_state16_pp0_stage15_iter0;
reg    ap_block_state16_io;
reg    ap_block_pp0_stage15_11001;
reg   [31:0] tmp_68_reg_2092;
reg  signed [31:0] gmem1_addr_42_read_reg_2097;
reg    ap_block_pp0_stage16_11001;
reg   [31:0] tmp_69_reg_2102;
reg  signed [31:0] gmem1_addr_43_read_reg_2107;
reg   [31:0] tmp_70_reg_2112;
reg  signed [31:0] gmem1_addr_44_read_reg_2117;
reg   [31:0] tmp_72_reg_2122;
reg  signed [31:0] gmem1_addr_45_read_reg_2127;
reg   [31:0] tmp_74_reg_2132;
reg  signed [31:0] gmem1_addr_46_read_reg_2137;
reg   [31:0] tmp_75_reg_2142;
reg  signed [31:0] gmem1_addr_47_read_reg_2147;
reg   [31:0] tmp_76_reg_2152;
reg  signed [31:0] gmem1_addr_48_read_reg_2157;
reg   [31:0] tmp_77_reg_2162;
reg  signed [31:0] gmem1_addr_49_read_reg_2167;
reg   [31:0] tmp_78_reg_2172;
reg   [31:0] trunc_ln818_s_reg_2177;
reg   [31:0] gmem1_addr_read_reg_2182;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage8_subdone;
wire   [63:0] trunc_ln58_cast6_fu_1764_p1;
wire  signed [63:0] sext_ln1273_fu_581_p1;
wire  signed [63:0] sext_ln813_fu_607_p1;
wire  signed [63:0] sext_ln1273_93_fu_653_p1;
wire  signed [63:0] sext_ln1273_94_fu_695_p1;
wire  signed [63:0] sext_ln1273_95_fu_741_p1;
wire  signed [63:0] sext_ln1273_96_fu_783_p1;
wire  signed [63:0] sext_ln1273_97_fu_829_p1;
wire  signed [63:0] sext_ln1273_98_fu_875_p1;
wire  signed [63:0] sext_ln1273_99_fu_917_p1;
wire  signed [63:0] sext_ln1273_100_fu_955_p1;
wire  signed [63:0] sext_ln1273_101_fu_1015_p1;
wire  signed [63:0] sext_ln1273_102_fu_1092_p1;
wire  signed [63:0] sext_ln1273_103_fu_1169_p1;
wire  signed [63:0] sext_ln1273_104_fu_1246_p1;
wire  signed [63:0] sext_ln1273_105_fu_1319_p1;
wire  signed [63:0] sext_ln1273_106_fu_1392_p1;
wire  signed [63:0] sext_ln1273_107_fu_1434_p1;
reg   [3:0] i_fu_146;
wire   [3:0] add_ln52_fu_1475_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_5;
wire   [5:0] shl_ln_fu_553_p3;
wire   [63:0] zext_ln1273_36_fu_561_p1;
wire   [63:0] add_ln1273_fu_565_p2;
wire   [61:0] trunc_ln_fu_571_p4;
wire   [63:0] add_ln813_fu_591_p2;
wire   [61:0] trunc_ln813_2_fu_597_p4;
wire   [4:0] add_ln1273_33_fu_620_p2;
wire   [6:0] shl_ln1273_s_fu_626_p3;
wire   [63:0] zext_ln1273_37_fu_634_p1;
wire   [63:0] add_ln1273_1_fu_638_p2;
wire   [61:0] trunc_ln1273_s_fu_643_p4;
wire   [4:0] add_ln1273_34_fu_663_p2;
wire   [6:0] shl_ln1273_1_fu_668_p3;
wire   [63:0] zext_ln1273_38_fu_676_p1;
wire   [63:0] add_ln1273_2_fu_680_p2;
wire   [61:0] trunc_ln1273_32_fu_685_p4;
wire   [5:0] add_ln1273_35_fu_708_p2;
wire   [7:0] shl_ln1273_2_fu_714_p3;
wire   [63:0] zext_ln1273_39_fu_722_p1;
wire   [63:0] add_ln1273_3_fu_726_p2;
wire   [61:0] trunc_ln1273_33_fu_731_p4;
wire   [5:0] add_ln1273_36_fu_751_p2;
wire   [7:0] shl_ln1273_3_fu_756_p3;
wire   [63:0] zext_ln1273_40_fu_764_p1;
wire   [63:0] add_ln1273_4_fu_768_p2;
wire   [61:0] trunc_ln1273_34_fu_773_p4;
wire   [4:0] add_ln1273_37_fu_793_p2;
wire   [6:0] tmp_65_fu_798_p3;
wire  signed [7:0] sext_ln1273_122_fu_806_p1;
wire   [63:0] zext_ln1273_41_fu_810_p1;
wire   [63:0] add_ln1273_5_fu_814_p2;
wire   [61:0] trunc_ln1273_35_fu_819_p4;
wire   [6:0] add_ln1273_38_fu_842_p2;
wire   [8:0] shl_ln1273_4_fu_848_p3;
wire   [63:0] zext_ln1273_42_fu_856_p1;
wire   [63:0] add_ln1273_6_fu_860_p2;
wire   [61:0] trunc_ln1273_36_fu_865_p4;
wire   [6:0] add_ln1273_39_fu_885_p2;
wire   [8:0] shl_ln1273_5_fu_890_p3;
wire   [63:0] zext_ln1273_43_fu_898_p1;
wire   [63:0] add_ln1273_7_fu_902_p2;
wire   [61:0] trunc_ln1273_37_fu_907_p4;
wire   [8:0] zext_ln1273_46_cast_fu_927_p4;
wire   [63:0] zext_ln1273_44_fu_936_p1;
wire   [63:0] add_ln1273_8_fu_940_p2;
wire   [61:0] trunc_ln1273_38_fu_945_p4;
wire   [30:0] mul_ln1273_fu_968_p1;
wire   [47:0] mul_ln1273_fu_968_p2;
wire   [6:0] add_ln1273_40_fu_983_p2;
wire   [8:0] shl_ln1273_6_fu_988_p3;
wire   [63:0] zext_ln1273_45_fu_996_p1;
wire   [63:0] add_ln1273_9_fu_1000_p2;
wire   [61:0] trunc_ln1273_39_fu_1005_p4;
wire   [30:0] mul_ln1273_56_fu_1028_p1;
wire   [47:0] shl_ln2_fu_1033_p3;
wire   [47:0] mul_ln1273_56_fu_1028_p2;
wire   [47:0] add_ln1347_fu_1040_p2;
wire   [5:0] add_ln1273_41_fu_1056_p2;
wire   [7:0] tmp_71_fu_1061_p3;
wire  signed [8:0] sext_ln1273_128_fu_1069_p1;
wire   [63:0] zext_ln1273_46_fu_1073_p1;
wire   [63:0] add_ln1273_10_fu_1077_p2;
wire   [61:0] trunc_ln1273_40_fu_1082_p4;
wire   [30:0] mul_ln1273_57_fu_1105_p1;
wire   [47:0] shl_ln838_s_fu_1110_p3;
wire   [47:0] mul_ln1273_57_fu_1105_p2;
wire   [47:0] add_ln1347_55_fu_1117_p2;
wire   [5:0] add_ln1273_42_fu_1133_p2;
wire   [7:0] tmp_73_fu_1138_p3;
wire  signed [8:0] sext_ln1273_130_fu_1146_p1;
wire   [63:0] zext_ln1273_47_fu_1150_p1;
wire   [63:0] add_ln1273_11_fu_1154_p2;
wire   [61:0] trunc_ln1273_41_fu_1159_p4;
wire   [30:0] mul_ln1273_58_fu_1185_p1;
wire   [47:0] shl_ln838_53_fu_1190_p3;
wire   [47:0] mul_ln1273_58_fu_1185_p2;
wire   [47:0] add_ln1347_56_fu_1197_p2;
wire   [7:0] add_ln1273_43_fu_1213_p2;
wire   [9:0] shl_ln1273_7_fu_1219_p3;
wire   [63:0] zext_ln1273_48_fu_1227_p1;
wire   [63:0] add_ln1273_12_fu_1231_p2;
wire   [61:0] trunc_ln1273_42_fu_1236_p4;
wire   [30:0] mul_ln1273_59_fu_1259_p1;
wire   [47:0] shl_ln838_54_fu_1264_p3;
wire   [47:0] mul_ln1273_59_fu_1259_p2;
wire   [47:0] add_ln1347_57_fu_1271_p2;
wire   [7:0] add_ln1273_44_fu_1287_p2;
wire   [9:0] shl_ln1273_8_fu_1292_p3;
wire   [63:0] zext_ln1273_49_fu_1300_p1;
wire   [63:0] add_ln1273_13_fu_1304_p2;
wire   [61:0] trunc_ln1273_43_fu_1309_p4;
wire   [30:0] mul_ln1273_60_fu_1332_p1;
wire   [47:0] shl_ln838_55_fu_1337_p3;
wire   [47:0] mul_ln1273_60_fu_1332_p2;
wire   [47:0] add_ln1347_58_fu_1344_p2;
wire   [7:0] add_ln1273_45_fu_1360_p2;
wire   [9:0] shl_ln1273_9_fu_1365_p3;
wire   [63:0] zext_ln1273_50_fu_1373_p1;
wire   [63:0] add_ln1273_14_fu_1377_p2;
wire   [61:0] trunc_ln1273_44_fu_1382_p4;
wire   [7:0] add_ln1273_46_fu_1402_p2;
wire   [9:0] shl_ln1273_10_fu_1407_p3;
wire   [63:0] zext_ln1273_51_fu_1415_p1;
wire   [63:0] add_ln1273_15_fu_1419_p2;
wire   [61:0] trunc_ln1273_45_fu_1424_p4;
wire   [30:0] mul_ln1273_61_fu_1447_p1;
wire   [47:0] shl_ln838_56_fu_1452_p3;
wire   [47:0] mul_ln1273_61_fu_1447_p2;
wire   [47:0] add_ln1347_59_fu_1459_p2;
wire   [30:0] mul_ln1273_62_fu_1483_p1;
wire   [47:0] shl_ln838_57_fu_1488_p3;
wire   [47:0] mul_ln1273_62_fu_1483_p2;
wire   [47:0] add_ln1347_60_fu_1495_p2;
wire   [30:0] mul_ln1273_63_fu_1519_p1;
wire   [47:0] shl_ln838_58_fu_1524_p3;
wire   [47:0] mul_ln1273_63_fu_1519_p2;
wire   [47:0] add_ln1347_61_fu_1531_p2;
wire   [30:0] mul_ln1273_64_fu_1550_p1;
wire   [47:0] shl_ln838_59_fu_1555_p3;
wire   [47:0] mul_ln1273_64_fu_1550_p2;
wire   [47:0] add_ln1347_62_fu_1562_p2;
wire   [30:0] mul_ln1273_65_fu_1581_p1;
wire   [47:0] shl_ln838_60_fu_1586_p3;
wire   [47:0] mul_ln1273_65_fu_1581_p2;
wire   [47:0] add_ln1347_63_fu_1593_p2;
wire   [30:0] mul_ln1273_66_fu_1612_p1;
wire   [47:0] shl_ln838_61_fu_1617_p3;
wire   [47:0] mul_ln1273_66_fu_1612_p2;
wire   [47:0] add_ln1347_64_fu_1624_p2;
wire   [30:0] mul_ln1273_67_fu_1643_p1;
wire   [47:0] shl_ln838_62_fu_1648_p3;
wire   [47:0] mul_ln1273_67_fu_1643_p2;
wire   [47:0] add_ln1347_65_fu_1655_p2;
wire   [30:0] mul_ln1273_68_fu_1674_p1;
wire   [47:0] shl_ln838_63_fu_1679_p3;
wire   [47:0] mul_ln1273_68_fu_1674_p2;
wire   [47:0] add_ln1347_66_fu_1686_p2;
wire   [30:0] mul_ln1273_69_fu_1705_p1;
wire   [47:0] shl_ln838_64_fu_1710_p3;
wire   [47:0] mul_ln1273_69_fu_1705_p2;
wire   [47:0] add_ln1347_67_fu_1717_p2;
wire   [30:0] mul_ln1273_70_fu_1736_p1;
wire   [47:0] shl_ln838_65_fu_1741_p3;
wire   [47:0] mul_ln1273_70_fu_1736_p2;
wire   [47:0] add_ln1347_68_fu_1748_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [16:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage10_subdone;
reg    ap_block_pp0_stage11_subdone;
reg    ap_block_pp0_stage12_subdone;
reg    ap_block_pp0_stage13_subdone;
reg    ap_block_pp0_stage14_subdone;
reg    ap_block_pp0_stage15_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

cnn_top_mul_32s_31ns_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 48 ))
mul_32s_31ns_48_1_1_U127(
    .din0(gmem1_addr_34_read_reg_1967),
    .din1(mul_ln1273_fu_968_p1),
    .dout(mul_ln1273_fu_968_p2)
);

cnn_top_mul_32s_31ns_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 48 ))
mul_32s_31ns_48_1_1_U128(
    .din0(gmem1_addr_35_read_reg_1978),
    .din1(mul_ln1273_56_fu_1028_p1),
    .dout(mul_ln1273_56_fu_1028_p2)
);

cnn_top_mul_32s_31ns_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 48 ))
mul_32s_31ns_48_1_1_U129(
    .din0(gmem1_addr_36_read_reg_1994),
    .din1(mul_ln1273_57_fu_1105_p1),
    .dout(mul_ln1273_57_fu_1105_p2)
);

cnn_top_mul_32s_31ns_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 48 ))
mul_32s_31ns_48_1_1_U130(
    .din0(gmem1_addr_37_read_reg_2010),
    .din1(mul_ln1273_58_fu_1185_p1),
    .dout(mul_ln1273_58_fu_1185_p2)
);

cnn_top_mul_32s_31ns_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 48 ))
mul_32s_31ns_48_1_1_U131(
    .din0(gmem1_addr_38_read_reg_2033),
    .din1(mul_ln1273_59_fu_1259_p1),
    .dout(mul_ln1273_59_fu_1259_p2)
);

cnn_top_mul_32s_31ns_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 48 ))
mul_32s_31ns_48_1_1_U132(
    .din0(gmem1_addr_39_read_reg_2049),
    .din1(mul_ln1273_60_fu_1332_p1),
    .dout(mul_ln1273_60_fu_1332_p2)
);

cnn_top_mul_32s_31ns_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 48 ))
mul_32s_31ns_48_1_1_U133(
    .din0(gmem1_addr_40_read_reg_2065),
    .din1(mul_ln1273_61_fu_1447_p1),
    .dout(mul_ln1273_61_fu_1447_p2)
);

cnn_top_mul_32s_31ns_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 48 ))
mul_32s_31ns_48_1_1_U134(
    .din0(gmem1_addr_41_read_reg_2087),
    .din1(mul_ln1273_62_fu_1483_p1),
    .dout(mul_ln1273_62_fu_1483_p2)
);

cnn_top_mul_32s_31ns_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 48 ))
mul_32s_31ns_48_1_1_U135(
    .din0(gmem1_addr_42_read_reg_2097),
    .din1(mul_ln1273_63_fu_1519_p1),
    .dout(mul_ln1273_63_fu_1519_p2)
);

cnn_top_mul_32s_31ns_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 48 ))
mul_32s_31ns_48_1_1_U136(
    .din0(gmem1_addr_43_read_reg_2107),
    .din1(mul_ln1273_64_fu_1550_p1),
    .dout(mul_ln1273_64_fu_1550_p2)
);

cnn_top_mul_32s_31ns_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 48 ))
mul_32s_31ns_48_1_1_U137(
    .din0(gmem1_addr_44_read_reg_2117),
    .din1(mul_ln1273_65_fu_1581_p1),
    .dout(mul_ln1273_65_fu_1581_p2)
);

cnn_top_mul_32s_31ns_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 48 ))
mul_32s_31ns_48_1_1_U138(
    .din0(gmem1_addr_45_read_reg_2127),
    .din1(mul_ln1273_66_fu_1612_p1),
    .dout(mul_ln1273_66_fu_1612_p2)
);

cnn_top_mul_32s_31ns_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 48 ))
mul_32s_31ns_48_1_1_U139(
    .din0(gmem1_addr_46_read_reg_2137),
    .din1(mul_ln1273_67_fu_1643_p1),
    .dout(mul_ln1273_67_fu_1643_p2)
);

cnn_top_mul_32s_31ns_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 48 ))
mul_32s_31ns_48_1_1_U140(
    .din0(gmem1_addr_47_read_reg_2147),
    .din1(mul_ln1273_68_fu_1674_p1),
    .dout(mul_ln1273_68_fu_1674_p2)
);

cnn_top_mul_32s_31ns_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 48 ))
mul_32s_31ns_48_1_1_U141(
    .din0(gmem1_addr_48_read_reg_2157),
    .din1(mul_ln1273_69_fu_1705_p1),
    .dout(mul_ln1273_69_fu_1705_p2)
);

cnn_top_mul_32s_31ns_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 48 ))
mul_32s_31ns_48_1_1_U142(
    .din0(gmem1_addr_49_read_reg_2167),
    .din1(mul_ln1273_70_fu_1736_p1),
    .dout(mul_ln1273_70_fu_1736_p2)
);

cnn_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage16),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage16) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage16_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter0_stage16) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_fu_146 <= 4'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        i_fu_146 <= add_ln52_fu_1475_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        gmem1_addr_34_read_reg_1967 <= m_axi_gmem1_RDATA;
        gmem1_addr_42_reg_1972 <= sext_ln1273_100_fu_955_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_547_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem1_addr_34_reg_1894 <= sext_ln1273_fu_581_p1;
        gmem1_addr_reg_1900 <= sext_ln813_fu_607_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        gmem1_addr_35_read_reg_1978 <= m_axi_gmem1_RDATA;
        gmem1_addr_43_reg_1988 <= sext_ln1273_101_fu_1015_p1;
        tmp_reg_1983 <= {{mul_ln1273_fu_968_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        gmem1_addr_35_reg_1912 <= sext_ln1273_93_fu_653_p1;
        zext_ln1273_35_reg_1906[3 : 0] <= zext_ln1273_35_fu_617_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        gmem1_addr_36_read_reg_1994 <= m_axi_gmem1_RDATA;
        gmem1_addr_44_reg_2004 <= sext_ln1273_102_fu_1092_p1;
        tmp_s_reg_1999 <= {{add_ln1347_fu_1040_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        gmem1_addr_36_reg_1918 <= sext_ln1273_94_fu_695_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        gmem1_addr_37_read_reg_2010 <= m_axi_gmem1_RDATA;
        gmem1_addr_45_reg_2020 <= sext_ln1273_103_fu_1169_p1;
        tmp_63_reg_2015 <= {{add_ln1347_55_fu_1117_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        gmem1_addr_37_reg_1931 <= sext_ln1273_95_fu_741_p1;
        trunc_ln58_cast5_reg_1924[3 : 0] <= trunc_ln58_cast5_fu_705_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        gmem1_addr_38_read_reg_2033 <= m_axi_gmem1_RDATA;
        gmem1_addr_46_reg_2043 <= sext_ln1273_104_fu_1246_p1;
        tmp_64_reg_2038 <= {{add_ln1347_56_fu_1197_p2[47:16]}};
        zext_ln1273_reg_2026[3 : 0] <= zext_ln1273_fu_1179_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        gmem1_addr_38_reg_1937 <= sext_ln1273_96_fu_783_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        gmem1_addr_39_read_reg_2049 <= m_axi_gmem1_RDATA;
        gmem1_addr_47_reg_2059 <= sext_ln1273_105_fu_1319_p1;
        tmp_66_reg_2054 <= {{add_ln1347_57_fu_1271_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        gmem1_addr_39_reg_1943 <= sext_ln1273_97_fu_829_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        gmem1_addr_40_read_reg_2065 <= m_axi_gmem1_RDATA;
        gmem1_addr_48_reg_2075 <= sext_ln1273_106_fu_1392_p1;
        gmem1_addr_49_reg_2081 <= sext_ln1273_107_fu_1434_p1;
        tmp_67_reg_2070 <= {{add_ln1347_58_fu_1344_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        gmem1_addr_40_reg_1955 <= sext_ln1273_98_fu_875_p1;
        zext_ln1273_34_reg_1949[3 : 0] <= zext_ln1273_34_fu_839_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        gmem1_addr_41_read_reg_2087 <= m_axi_gmem1_RDATA;
        tmp_68_reg_2092 <= {{add_ln1347_59_fu_1459_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        gmem1_addr_41_reg_1961 <= sext_ln1273_99_fu_917_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        gmem1_addr_42_read_reg_2097 <= m_axi_gmem1_RDATA;
        tmp_69_reg_2102 <= {{add_ln1347_60_fu_1495_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem1_addr_43_read_reg_2107 <= m_axi_gmem1_RDATA;
        i_5_reg_1879 <= ap_sig_allocacmp_i_5;
        i_5_reg_1879_pp0_iter1_reg <= i_5_reg_1879;
        icmp_ln52_reg_1890 <= icmp_ln52_fu_547_p2;
        tmp_70_reg_2112 <= {{add_ln1347_61_fu_1531_p2[47:16]}};
        zext_ln1271_31_cast_reg_1869[30 : 0] <= zext_ln1271_31_cast_fu_531_p1[30 : 0];
        zext_ln1271_32_cast_reg_1864[30 : 0] <= zext_ln1271_32_cast_fu_527_p1[30 : 0];
        zext_ln1271_33_cast_reg_1859[30 : 0] <= zext_ln1271_33_cast_fu_523_p1[30 : 0];
        zext_ln1271_34_cast_reg_1854[30 : 0] <= zext_ln1271_34_cast_fu_519_p1[30 : 0];
        zext_ln1271_35_cast_reg_1849[30 : 0] <= zext_ln1271_35_cast_fu_515_p1[30 : 0];
        zext_ln1271_36_cast_reg_1844[30 : 0] <= zext_ln1271_36_cast_fu_511_p1[30 : 0];
        zext_ln1271_37_cast_reg_1839[30 : 0] <= zext_ln1271_37_cast_fu_507_p1[30 : 0];
        zext_ln1271_38_cast_reg_1834[30 : 0] <= zext_ln1271_38_cast_fu_503_p1[30 : 0];
        zext_ln1271_39_cast_reg_1829[30 : 0] <= zext_ln1271_39_cast_fu_499_p1[30 : 0];
        zext_ln1271_40_cast_reg_1824[30 : 0] <= zext_ln1271_40_cast_fu_495_p1[30 : 0];
        zext_ln1271_41_cast_reg_1819[30 : 0] <= zext_ln1271_41_cast_fu_491_p1[30 : 0];
        zext_ln1271_42_cast_reg_1814[30 : 0] <= zext_ln1271_42_cast_fu_487_p1[30 : 0];
        zext_ln1271_43_cast_reg_1809[30 : 0] <= zext_ln1271_43_cast_fu_483_p1[30 : 0];
        zext_ln1271_44_cast_reg_1804[30 : 0] <= zext_ln1271_44_cast_fu_479_p1[30 : 0];
        zext_ln1271_cast_reg_1874[30 : 0] <= zext_ln1271_cast_fu_535_p1[30 : 0];
        zext_ln52_cast_reg_1799[30 : 0] <= zext_ln52_cast_fu_475_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        gmem1_addr_44_read_reg_2117 <= m_axi_gmem1_RDATA;
        tmp_72_reg_2122 <= {{add_ln1347_62_fu_1562_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        gmem1_addr_45_read_reg_2127 <= m_axi_gmem1_RDATA;
        tmp_74_reg_2132 <= {{add_ln1347_63_fu_1593_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        gmem1_addr_46_read_reg_2137 <= m_axi_gmem1_RDATA;
        tmp_75_reg_2142 <= {{add_ln1347_64_fu_1624_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        gmem1_addr_47_read_reg_2147 <= m_axi_gmem1_RDATA;
        tmp_76_reg_2152 <= {{add_ln1347_65_fu_1655_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        gmem1_addr_48_read_reg_2157 <= m_axi_gmem1_RDATA;
        tmp_77_reg_2162 <= {{add_ln1347_66_fu_1686_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        gmem1_addr_49_read_reg_2167 <= m_axi_gmem1_RDATA;
        tmp_78_reg_2172 <= {{add_ln1347_67_fu_1717_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        gmem1_addr_read_reg_2182 <= m_axi_gmem1_RDATA;
        trunc_ln818_s_reg_2177 <= {{add_ln1347_68_fu_1748_p2[47:16]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_subdone) & (icmp_ln52_reg_1890 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage16 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage16 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage16) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage16_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_5 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_5 = i_fu_146;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln52_reg_1890 == 1'd0)))) begin
        gmem1_blk_n_AR = m_axi_gmem1_ARREADY;
    end else begin
        gmem1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8) & (icmp_ln52_reg_1890 == 1'd0)))) begin
        gmem1_blk_n_R = m_axi_gmem1_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem1_ARADDR = gmem1_addr_reg_1900;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        m_axi_gmem1_ARADDR = gmem1_addr_49_reg_2081;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        m_axi_gmem1_ARADDR = gmem1_addr_48_reg_2075;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        m_axi_gmem1_ARADDR = gmem1_addr_47_reg_2059;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        m_axi_gmem1_ARADDR = gmem1_addr_46_reg_2043;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        m_axi_gmem1_ARADDR = gmem1_addr_45_reg_2020;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        m_axi_gmem1_ARADDR = gmem1_addr_44_reg_2004;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        m_axi_gmem1_ARADDR = gmem1_addr_43_reg_1988;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        m_axi_gmem1_ARADDR = gmem1_addr_42_reg_1972;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        m_axi_gmem1_ARADDR = gmem1_addr_41_reg_1961;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        m_axi_gmem1_ARADDR = gmem1_addr_40_reg_1955;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        m_axi_gmem1_ARADDR = gmem1_addr_39_reg_1943;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        m_axi_gmem1_ARADDR = gmem1_addr_38_reg_1937;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        m_axi_gmem1_ARADDR = gmem1_addr_37_reg_1931;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        m_axi_gmem1_ARADDR = gmem1_addr_36_reg_1918;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        m_axi_gmem1_ARADDR = gmem1_addr_35_reg_1912;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln52_reg_1890 == 1'd0))) begin
        m_axi_gmem1_ARADDR = gmem1_addr_34_reg_1894;
    end else begin
        m_axi_gmem1_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln52_reg_1890 == 1'd0)))) begin
        m_axi_gmem1_ARVALID = 1'b1;
    end else begin
        m_axi_gmem1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001) & (icmp_ln52_reg_1890 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln52_reg_1890 == 1'd0)))) begin
        m_axi_gmem1_RREADY = 1'b1;
    end else begin
        m_axi_gmem1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001))) begin
        out_Dense_V_ce0 = 1'b1;
    end else begin
        out_Dense_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001))) begin
        out_Dense_V_we0 = 1'b1;
    end else begin
        out_Dense_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1273_10_fu_1077_p2 = (zext_ln1273_46_fu_1073_p1 + weight);

assign add_ln1273_11_fu_1154_p2 = (zext_ln1273_47_fu_1150_p1 + weight);

assign add_ln1273_12_fu_1231_p2 = (zext_ln1273_48_fu_1227_p1 + weight);

assign add_ln1273_13_fu_1304_p2 = (zext_ln1273_49_fu_1300_p1 + weight);

assign add_ln1273_14_fu_1377_p2 = (zext_ln1273_50_fu_1373_p1 + weight);

assign add_ln1273_15_fu_1419_p2 = (zext_ln1273_51_fu_1415_p1 + weight);

assign add_ln1273_1_fu_638_p2 = (zext_ln1273_37_fu_634_p1 + weight);

assign add_ln1273_2_fu_680_p2 = (zext_ln1273_38_fu_676_p1 + weight);

assign add_ln1273_33_fu_620_p2 = (zext_ln1273_35_fu_617_p1 + 5'd10);

assign add_ln1273_34_fu_663_p2 = ($signed(zext_ln1273_35_reg_1906) + $signed(5'd20));

assign add_ln1273_35_fu_708_p2 = (trunc_ln58_cast5_fu_705_p1 + 6'd30);

assign add_ln1273_36_fu_751_p2 = ($signed(trunc_ln58_cast5_reg_1924) + $signed(6'd40));

assign add_ln1273_37_fu_793_p2 = ($signed(zext_ln1273_35_reg_1906) + $signed(5'd18));

assign add_ln1273_38_fu_842_p2 = (zext_ln1273_34_fu_839_p1 + 7'd60);

assign add_ln1273_39_fu_885_p2 = ($signed(zext_ln1273_34_reg_1949) + $signed(7'd70));

assign add_ln1273_3_fu_726_p2 = (zext_ln1273_39_fu_722_p1 + weight);

assign add_ln1273_40_fu_983_p2 = ($signed(zext_ln1273_34_reg_1949) + $signed(7'd90));

assign add_ln1273_41_fu_1056_p2 = ($signed(trunc_ln58_cast5_reg_1924) + $signed(6'd36));

assign add_ln1273_42_fu_1133_p2 = ($signed(trunc_ln58_cast5_reg_1924) + $signed(6'd46));

assign add_ln1273_43_fu_1213_p2 = (zext_ln1273_fu_1179_p1 + 8'd120);

assign add_ln1273_44_fu_1287_p2 = ($signed(zext_ln1273_reg_2026) + $signed(8'd130));

assign add_ln1273_45_fu_1360_p2 = ($signed(zext_ln1273_reg_2026) + $signed(8'd140));

assign add_ln1273_46_fu_1402_p2 = ($signed(zext_ln1273_reg_2026) + $signed(8'd150));

assign add_ln1273_4_fu_768_p2 = (zext_ln1273_40_fu_764_p1 + weight);

assign add_ln1273_5_fu_814_p2 = (zext_ln1273_41_fu_810_p1 + weight);

assign add_ln1273_6_fu_860_p2 = (zext_ln1273_42_fu_856_p1 + weight);

assign add_ln1273_7_fu_902_p2 = (zext_ln1273_43_fu_898_p1 + weight);

assign add_ln1273_8_fu_940_p2 = (zext_ln1273_44_fu_936_p1 + weight);

assign add_ln1273_9_fu_1000_p2 = (zext_ln1273_45_fu_996_p1 + weight);

assign add_ln1273_fu_565_p2 = (zext_ln1273_36_fu_561_p1 + weight);

assign add_ln1347_55_fu_1117_p2 = (shl_ln838_s_fu_1110_p3 + mul_ln1273_57_fu_1105_p2);

assign add_ln1347_56_fu_1197_p2 = (shl_ln838_53_fu_1190_p3 + mul_ln1273_58_fu_1185_p2);

assign add_ln1347_57_fu_1271_p2 = (shl_ln838_54_fu_1264_p3 + mul_ln1273_59_fu_1259_p2);

assign add_ln1347_58_fu_1344_p2 = (shl_ln838_55_fu_1337_p3 + mul_ln1273_60_fu_1332_p2);

assign add_ln1347_59_fu_1459_p2 = (shl_ln838_56_fu_1452_p3 + mul_ln1273_61_fu_1447_p2);

assign add_ln1347_60_fu_1495_p2 = (shl_ln838_57_fu_1488_p3 + mul_ln1273_62_fu_1483_p2);

assign add_ln1347_61_fu_1531_p2 = (shl_ln838_58_fu_1524_p3 + mul_ln1273_63_fu_1519_p2);

assign add_ln1347_62_fu_1562_p2 = (shl_ln838_59_fu_1555_p3 + mul_ln1273_64_fu_1550_p2);

assign add_ln1347_63_fu_1593_p2 = (shl_ln838_60_fu_1586_p3 + mul_ln1273_65_fu_1581_p2);

assign add_ln1347_64_fu_1624_p2 = (shl_ln838_61_fu_1617_p3 + mul_ln1273_66_fu_1612_p2);

assign add_ln1347_65_fu_1655_p2 = (shl_ln838_62_fu_1648_p3 + mul_ln1273_67_fu_1643_p2);

assign add_ln1347_66_fu_1686_p2 = (shl_ln838_63_fu_1679_p3 + mul_ln1273_68_fu_1674_p2);

assign add_ln1347_67_fu_1717_p2 = (shl_ln838_64_fu_1710_p3 + mul_ln1273_69_fu_1705_p2);

assign add_ln1347_68_fu_1748_p2 = (shl_ln838_65_fu_1741_p3 + mul_ln1273_70_fu_1736_p2);

assign add_ln1347_fu_1040_p2 = (shl_ln2_fu_1033_p3 + mul_ln1273_56_fu_1028_p2);

assign add_ln52_fu_1475_p2 = (i_5_reg_1879 + 4'd1);

assign add_ln813_fu_591_p2 = (zext_ln1273_36_fu_561_p1 + bias);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((m_axi_gmem1_RVALID == 1'b0) | (m_axi_gmem1_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((m_axi_gmem1_RVALID == 1'b0) | (m_axi_gmem1_ARREADY == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0))));
end

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage11_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0))));
end

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state13_io) | ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state13_io) | ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0))));
end

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage13_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage13_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0))));
end

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage14_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state15_io) | ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage14_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state15_io) | ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0))));
end

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage15_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage15_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0))));
end

assign ap_block_pp0_stage16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage16_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage16_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)) | ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)) | ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state5_io)) | ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state5_io)) | ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state6_io)) | ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state6_io)) | ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state7_io)) | ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state7_io)) | ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state8_io)) | ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state8_io)) | ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state9_io) | ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state9_io) | ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0))));
end

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0))));
end

always @ (*) begin
    ap_block_state10_io = ((m_axi_gmem1_ARREADY == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

always @ (*) begin
    ap_block_state10_pp0_stage9_iter0 = ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

always @ (*) begin
    ap_block_state11_io = ((m_axi_gmem1_ARREADY == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

always @ (*) begin
    ap_block_state11_pp0_stage10_iter0 = ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

always @ (*) begin
    ap_block_state12_io = ((m_axi_gmem1_ARREADY == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

always @ (*) begin
    ap_block_state12_pp0_stage11_iter0 = ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

always @ (*) begin
    ap_block_state13_io = ((m_axi_gmem1_ARREADY == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

always @ (*) begin
    ap_block_state13_pp0_stage12_iter0 = ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

always @ (*) begin
    ap_block_state14_io = ((m_axi_gmem1_ARREADY == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

always @ (*) begin
    ap_block_state14_pp0_stage13_iter0 = ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

always @ (*) begin
    ap_block_state15_io = ((m_axi_gmem1_ARREADY == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

always @ (*) begin
    ap_block_state15_pp0_stage14_iter0 = ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

always @ (*) begin
    ap_block_state16_io = ((m_axi_gmem1_ARREADY == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

always @ (*) begin
    ap_block_state16_pp0_stage15_iter0 = ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

always @ (*) begin
    ap_block_state17_io = ((m_axi_gmem1_ARREADY == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

always @ (*) begin
    ap_block_state17_pp0_stage16_iter0 = ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

always @ (*) begin
    ap_block_state18_pp0_stage0_iter1 = (m_axi_gmem1_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state19_pp0_stage1_iter1 = (m_axi_gmem1_RVALID == 1'b0);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp0_stage2_iter1 = (m_axi_gmem1_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state21_pp0_stage3_iter1 = (m_axi_gmem1_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state22_pp0_stage4_iter1 = (m_axi_gmem1_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state23_pp0_stage5_iter1 = (m_axi_gmem1_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state24_pp0_stage6_iter1 = (m_axi_gmem1_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state25_pp0_stage7_iter1 = (m_axi_gmem1_RVALID == 1'b0);
end

assign ap_block_state26_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((m_axi_gmem1_ARREADY == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_gmem1_ARREADY == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((m_axi_gmem1_ARREADY == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((m_axi_gmem1_ARREADY == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((m_axi_gmem1_ARREADY == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((m_axi_gmem1_ARREADY == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((m_axi_gmem1_ARREADY == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((m_axi_gmem1_ARREADY == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

always @ (*) begin
    ap_block_state9_pp0_stage8_iter0 = ((m_axi_gmem1_RVALID == 1'b0) & (icmp_ln52_reg_1890 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage16;

assign icmp_ln52_fu_547_p2 = ((ap_sig_allocacmp_i_5 == 4'd10) ? 1'b1 : 1'b0);

assign m_axi_gmem1_ARBURST = 2'd0;

assign m_axi_gmem1_ARCACHE = 4'd0;

assign m_axi_gmem1_ARID = 1'd0;

assign m_axi_gmem1_ARLEN = 32'd1;

assign m_axi_gmem1_ARLOCK = 2'd0;

assign m_axi_gmem1_ARPROT = 3'd0;

assign m_axi_gmem1_ARQOS = 4'd0;

assign m_axi_gmem1_ARREGION = 4'd0;

assign m_axi_gmem1_ARSIZE = 3'd0;

assign m_axi_gmem1_ARUSER = 1'd0;

assign m_axi_gmem1_AWADDR = 64'd0;

assign m_axi_gmem1_AWBURST = 2'd0;

assign m_axi_gmem1_AWCACHE = 4'd0;

assign m_axi_gmem1_AWID = 1'd0;

assign m_axi_gmem1_AWLEN = 32'd0;

assign m_axi_gmem1_AWLOCK = 2'd0;

assign m_axi_gmem1_AWPROT = 3'd0;

assign m_axi_gmem1_AWQOS = 4'd0;

assign m_axi_gmem1_AWREGION = 4'd0;

assign m_axi_gmem1_AWSIZE = 3'd0;

assign m_axi_gmem1_AWUSER = 1'd0;

assign m_axi_gmem1_AWVALID = 1'b0;

assign m_axi_gmem1_BREADY = 1'b0;

assign m_axi_gmem1_WDATA = 32'd0;

assign m_axi_gmem1_WID = 1'd0;

assign m_axi_gmem1_WLAST = 1'b0;

assign m_axi_gmem1_WSTRB = 4'd0;

assign m_axi_gmem1_WUSER = 1'd0;

assign m_axi_gmem1_WVALID = 1'b0;

assign mul_ln1273_56_fu_1028_p1 = zext_ln1271_31_cast_reg_1869;

assign mul_ln1273_57_fu_1105_p1 = zext_ln1271_32_cast_reg_1864;

assign mul_ln1273_58_fu_1185_p1 = zext_ln1271_33_cast_reg_1859;

assign mul_ln1273_59_fu_1259_p1 = zext_ln1271_34_cast_reg_1854;

assign mul_ln1273_60_fu_1332_p1 = zext_ln1271_35_cast_reg_1849;

assign mul_ln1273_61_fu_1447_p1 = zext_ln1271_36_cast_reg_1844;

assign mul_ln1273_62_fu_1483_p1 = zext_ln1271_37_cast_reg_1839;

assign mul_ln1273_63_fu_1519_p1 = zext_ln1271_38_cast_reg_1834;

assign mul_ln1273_64_fu_1550_p1 = zext_ln1271_39_cast_reg_1829;

assign mul_ln1273_65_fu_1581_p1 = zext_ln1271_40_cast_reg_1824;

assign mul_ln1273_66_fu_1612_p1 = zext_ln1271_41_cast_reg_1819;

assign mul_ln1273_67_fu_1643_p1 = zext_ln1271_42_cast_reg_1814;

assign mul_ln1273_68_fu_1674_p1 = zext_ln1271_43_cast_reg_1809;

assign mul_ln1273_69_fu_1705_p1 = zext_ln1271_44_cast_reg_1804;

assign mul_ln1273_70_fu_1736_p1 = zext_ln52_cast_reg_1799;

assign mul_ln1273_fu_968_p1 = zext_ln1271_cast_reg_1874;

assign out_Dense_V_address0 = trunc_ln58_cast6_fu_1764_p1;

assign out_Dense_V_d0 = (gmem1_addr_read_reg_2182 + trunc_ln818_s_reg_2177);

assign sext_ln1273_100_fu_955_p1 = $signed(trunc_ln1273_38_fu_945_p4);

assign sext_ln1273_101_fu_1015_p1 = $signed(trunc_ln1273_39_fu_1005_p4);

assign sext_ln1273_102_fu_1092_p1 = $signed(trunc_ln1273_40_fu_1082_p4);

assign sext_ln1273_103_fu_1169_p1 = $signed(trunc_ln1273_41_fu_1159_p4);

assign sext_ln1273_104_fu_1246_p1 = $signed(trunc_ln1273_42_fu_1236_p4);

assign sext_ln1273_105_fu_1319_p1 = $signed(trunc_ln1273_43_fu_1309_p4);

assign sext_ln1273_106_fu_1392_p1 = $signed(trunc_ln1273_44_fu_1382_p4);

assign sext_ln1273_107_fu_1434_p1 = $signed(trunc_ln1273_45_fu_1424_p4);

assign sext_ln1273_122_fu_806_p1 = $signed(tmp_65_fu_798_p3);

assign sext_ln1273_128_fu_1069_p1 = $signed(tmp_71_fu_1061_p3);

assign sext_ln1273_130_fu_1146_p1 = $signed(tmp_73_fu_1138_p3);

assign sext_ln1273_93_fu_653_p1 = $signed(trunc_ln1273_s_fu_643_p4);

assign sext_ln1273_94_fu_695_p1 = $signed(trunc_ln1273_32_fu_685_p4);

assign sext_ln1273_95_fu_741_p1 = $signed(trunc_ln1273_33_fu_731_p4);

assign sext_ln1273_96_fu_783_p1 = $signed(trunc_ln1273_34_fu_773_p4);

assign sext_ln1273_97_fu_829_p1 = $signed(trunc_ln1273_35_fu_819_p4);

assign sext_ln1273_98_fu_875_p1 = $signed(trunc_ln1273_36_fu_865_p4);

assign sext_ln1273_99_fu_917_p1 = $signed(trunc_ln1273_37_fu_907_p4);

assign sext_ln1273_fu_581_p1 = $signed(trunc_ln_fu_571_p4);

assign sext_ln813_fu_607_p1 = $signed(trunc_ln813_2_fu_597_p4);

assign shl_ln1273_10_fu_1407_p3 = {{add_ln1273_46_fu_1402_p2}, {2'd0}};

assign shl_ln1273_1_fu_668_p3 = {{add_ln1273_34_fu_663_p2}, {2'd0}};

assign shl_ln1273_2_fu_714_p3 = {{add_ln1273_35_fu_708_p2}, {2'd0}};

assign shl_ln1273_3_fu_756_p3 = {{add_ln1273_36_fu_751_p2}, {2'd0}};

assign shl_ln1273_4_fu_848_p3 = {{add_ln1273_38_fu_842_p2}, {2'd0}};

assign shl_ln1273_5_fu_890_p3 = {{add_ln1273_39_fu_885_p2}, {2'd0}};

assign shl_ln1273_6_fu_988_p3 = {{add_ln1273_40_fu_983_p2}, {2'd0}};

assign shl_ln1273_7_fu_1219_p3 = {{add_ln1273_43_fu_1213_p2}, {2'd0}};

assign shl_ln1273_8_fu_1292_p3 = {{add_ln1273_44_fu_1287_p2}, {2'd0}};

assign shl_ln1273_9_fu_1365_p3 = {{add_ln1273_45_fu_1360_p2}, {2'd0}};

assign shl_ln1273_s_fu_626_p3 = {{add_ln1273_33_fu_620_p2}, {2'd0}};

assign shl_ln2_fu_1033_p3 = {{tmp_reg_1983}, {16'd0}};

assign shl_ln838_53_fu_1190_p3 = {{tmp_63_reg_2015}, {16'd0}};

assign shl_ln838_54_fu_1264_p3 = {{tmp_64_reg_2038}, {16'd0}};

assign shl_ln838_55_fu_1337_p3 = {{tmp_66_reg_2054}, {16'd0}};

assign shl_ln838_56_fu_1452_p3 = {{tmp_67_reg_2070}, {16'd0}};

assign shl_ln838_57_fu_1488_p3 = {{tmp_68_reg_2092}, {16'd0}};

assign shl_ln838_58_fu_1524_p3 = {{tmp_69_reg_2102}, {16'd0}};

assign shl_ln838_59_fu_1555_p3 = {{tmp_70_reg_2112}, {16'd0}};

assign shl_ln838_60_fu_1586_p3 = {{tmp_72_reg_2122}, {16'd0}};

assign shl_ln838_61_fu_1617_p3 = {{tmp_74_reg_2132}, {16'd0}};

assign shl_ln838_62_fu_1648_p3 = {{tmp_75_reg_2142}, {16'd0}};

assign shl_ln838_63_fu_1679_p3 = {{tmp_76_reg_2152}, {16'd0}};

assign shl_ln838_64_fu_1710_p3 = {{tmp_77_reg_2162}, {16'd0}};

assign shl_ln838_65_fu_1741_p3 = {{tmp_78_reg_2172}, {16'd0}};

assign shl_ln838_s_fu_1110_p3 = {{tmp_s_reg_1999}, {16'd0}};

assign shl_ln_fu_553_p3 = {{ap_sig_allocacmp_i_5}, {2'd0}};

assign tmp_65_fu_798_p3 = {{add_ln1273_37_fu_793_p2}, {2'd0}};

assign tmp_71_fu_1061_p3 = {{add_ln1273_41_fu_1056_p2}, {2'd0}};

assign tmp_73_fu_1138_p3 = {{add_ln1273_42_fu_1133_p2}, {2'd0}};

assign trunc_ln1273_32_fu_685_p4 = {{add_ln1273_2_fu_680_p2[63:2]}};

assign trunc_ln1273_33_fu_731_p4 = {{add_ln1273_3_fu_726_p2[63:2]}};

assign trunc_ln1273_34_fu_773_p4 = {{add_ln1273_4_fu_768_p2[63:2]}};

assign trunc_ln1273_35_fu_819_p4 = {{add_ln1273_5_fu_814_p2[63:2]}};

assign trunc_ln1273_36_fu_865_p4 = {{add_ln1273_6_fu_860_p2[63:2]}};

assign trunc_ln1273_37_fu_907_p4 = {{add_ln1273_7_fu_902_p2[63:2]}};

assign trunc_ln1273_38_fu_945_p4 = {{add_ln1273_8_fu_940_p2[63:2]}};

assign trunc_ln1273_39_fu_1005_p4 = {{add_ln1273_9_fu_1000_p2[63:2]}};

assign trunc_ln1273_40_fu_1082_p4 = {{add_ln1273_10_fu_1077_p2[63:2]}};

assign trunc_ln1273_41_fu_1159_p4 = {{add_ln1273_11_fu_1154_p2[63:2]}};

assign trunc_ln1273_42_fu_1236_p4 = {{add_ln1273_12_fu_1231_p2[63:2]}};

assign trunc_ln1273_43_fu_1309_p4 = {{add_ln1273_13_fu_1304_p2[63:2]}};

assign trunc_ln1273_44_fu_1382_p4 = {{add_ln1273_14_fu_1377_p2[63:2]}};

assign trunc_ln1273_45_fu_1424_p4 = {{add_ln1273_15_fu_1419_p2[63:2]}};

assign trunc_ln1273_s_fu_643_p4 = {{add_ln1273_1_fu_638_p2[63:2]}};

assign trunc_ln58_cast5_fu_705_p1 = i_5_reg_1879;

assign trunc_ln58_cast6_fu_1764_p1 = i_5_reg_1879_pp0_iter1_reg;

assign trunc_ln813_2_fu_597_p4 = {{add_ln813_fu_591_p2[63:2]}};

assign trunc_ln_fu_571_p4 = {{add_ln1273_fu_565_p2[63:2]}};

assign zext_ln1271_31_cast_fu_531_p1 = zext_ln1271_31;

assign zext_ln1271_32_cast_fu_527_p1 = zext_ln1271_32;

assign zext_ln1271_33_cast_fu_523_p1 = zext_ln1271_33;

assign zext_ln1271_34_cast_fu_519_p1 = zext_ln1271_34;

assign zext_ln1271_35_cast_fu_515_p1 = zext_ln1271_35;

assign zext_ln1271_36_cast_fu_511_p1 = zext_ln1271_36;

assign zext_ln1271_37_cast_fu_507_p1 = zext_ln1271_37;

assign zext_ln1271_38_cast_fu_503_p1 = zext_ln1271_38;

assign zext_ln1271_39_cast_fu_499_p1 = zext_ln1271_39;

assign zext_ln1271_40_cast_fu_495_p1 = zext_ln1271_40;

assign zext_ln1271_41_cast_fu_491_p1 = zext_ln1271_41;

assign zext_ln1271_42_cast_fu_487_p1 = zext_ln1271_42;

assign zext_ln1271_43_cast_fu_483_p1 = zext_ln1271_43;

assign zext_ln1271_44_cast_fu_479_p1 = zext_ln1271_44;

assign zext_ln1271_cast_fu_535_p1 = zext_ln1271;

assign zext_ln1273_34_fu_839_p1 = i_5_reg_1879;

assign zext_ln1273_35_fu_617_p1 = i_5_reg_1879;

assign zext_ln1273_36_fu_561_p1 = shl_ln_fu_553_p3;

assign zext_ln1273_37_fu_634_p1 = shl_ln1273_s_fu_626_p3;

assign zext_ln1273_38_fu_676_p1 = shl_ln1273_1_fu_668_p3;

assign zext_ln1273_39_fu_722_p1 = shl_ln1273_2_fu_714_p3;

assign zext_ln1273_40_fu_764_p1 = shl_ln1273_3_fu_756_p3;

assign zext_ln1273_41_fu_810_p1 = $unsigned(sext_ln1273_122_fu_806_p1);

assign zext_ln1273_42_fu_856_p1 = shl_ln1273_4_fu_848_p3;

assign zext_ln1273_43_fu_898_p1 = shl_ln1273_5_fu_890_p3;

assign zext_ln1273_44_fu_936_p1 = zext_ln1273_46_cast_fu_927_p4;

assign zext_ln1273_45_fu_996_p1 = shl_ln1273_6_fu_988_p3;

assign zext_ln1273_46_cast_fu_927_p4 = {{{{3'd5}, {i_5_reg_1879}}}, {2'd0}};

assign zext_ln1273_46_fu_1073_p1 = $unsigned(sext_ln1273_128_fu_1069_p1);

assign zext_ln1273_47_fu_1150_p1 = $unsigned(sext_ln1273_130_fu_1146_p1);

assign zext_ln1273_48_fu_1227_p1 = shl_ln1273_7_fu_1219_p3;

assign zext_ln1273_49_fu_1300_p1 = shl_ln1273_8_fu_1292_p3;

assign zext_ln1273_50_fu_1373_p1 = shl_ln1273_9_fu_1365_p3;

assign zext_ln1273_51_fu_1415_p1 = shl_ln1273_10_fu_1407_p3;

assign zext_ln1273_fu_1179_p1 = i_5_reg_1879;

assign zext_ln52_cast_fu_475_p1 = zext_ln52;

always @ (posedge ap_clk) begin
    zext_ln52_cast_reg_1799[47:31] <= 17'b00000000000000000;
    zext_ln1271_44_cast_reg_1804[47:31] <= 17'b00000000000000000;
    zext_ln1271_43_cast_reg_1809[47:31] <= 17'b00000000000000000;
    zext_ln1271_42_cast_reg_1814[47:31] <= 17'b00000000000000000;
    zext_ln1271_41_cast_reg_1819[47:31] <= 17'b00000000000000000;
    zext_ln1271_40_cast_reg_1824[47:31] <= 17'b00000000000000000;
    zext_ln1271_39_cast_reg_1829[47:31] <= 17'b00000000000000000;
    zext_ln1271_38_cast_reg_1834[47:31] <= 17'b00000000000000000;
    zext_ln1271_37_cast_reg_1839[47:31] <= 17'b00000000000000000;
    zext_ln1271_36_cast_reg_1844[47:31] <= 17'b00000000000000000;
    zext_ln1271_35_cast_reg_1849[47:31] <= 17'b00000000000000000;
    zext_ln1271_34_cast_reg_1854[47:31] <= 17'b00000000000000000;
    zext_ln1271_33_cast_reg_1859[47:31] <= 17'b00000000000000000;
    zext_ln1271_32_cast_reg_1864[47:31] <= 17'b00000000000000000;
    zext_ln1271_31_cast_reg_1869[47:31] <= 17'b00000000000000000;
    zext_ln1271_cast_reg_1874[47:31] <= 17'b00000000000000000;
    zext_ln1273_35_reg_1906[4] <= 1'b0;
    trunc_ln58_cast5_reg_1924[5:4] <= 2'b00;
    zext_ln1273_34_reg_1949[6:4] <= 3'b000;
    zext_ln1273_reg_2026[7:4] <= 4'b0000;
end

endmodule //cnn_top_Dense_2_Pipeline_loop_for_a_Dense_2
