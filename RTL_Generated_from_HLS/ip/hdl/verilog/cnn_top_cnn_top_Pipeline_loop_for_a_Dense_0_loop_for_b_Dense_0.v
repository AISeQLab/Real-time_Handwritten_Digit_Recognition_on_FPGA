// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cnn_top_cnn_top_Pipeline_loop_for_a_Dense_0_loop_for_b_Dense_0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RFIFONUM,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        flatten_V_address0,
        flatten_V_ce0,
        flatten_V_q0,
        Weights,
        sext_ln7,
        out_Dense_V_1_address0,
        out_Dense_V_1_ce0,
        out_Dense_V_1_we0,
        out_Dense_V_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [63:0] m_axi_gmem1_AWADDR;
output  [0:0] m_axi_gmem1_AWID;
output  [31:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [0:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [31:0] m_axi_gmem1_WDATA;
output  [3:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [0:0] m_axi_gmem1_WID;
output  [0:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [63:0] m_axi_gmem1_ARADDR;
output  [0:0] m_axi_gmem1_ARID;
output  [31:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [0:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [31:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [0:0] m_axi_gmem1_RID;
input  [8:0] m_axi_gmem1_RFIFONUM;
input  [0:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [0:0] m_axi_gmem1_BID;
input  [0:0] m_axi_gmem1_BUSER;
output  [6:0] flatten_V_address0;
output   flatten_V_ce0;
input  [31:0] flatten_V_q0;
input  [63:0] Weights;
input  [61:0] sext_ln7;
output  [4:0] out_Dense_V_1_address0;
output   out_Dense_V_1_ce0;
output   out_Dense_V_1_we0;
output  [31:0] out_Dense_V_1_d0;

reg ap_idle;
reg m_axi_gmem1_ARVALID;
reg[63:0] m_axi_gmem1_ARADDR;
reg m_axi_gmem1_RREADY;
reg flatten_V_ce0;
reg out_Dense_V_1_ce0;
reg out_Dense_V_1_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [0:0] icmp_ln7_reg_444;
reg    ap_block_state2_io;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
reg   [0:0] ifzero_reg_470;
reg   [0:0] ifzero_reg_470_pp0_iter4_reg;
reg    ap_block_state10_pp0_stage1_iter4;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem1_blk_n_AR;
wire    ap_block_pp0_stage1;
reg    gmem1_blk_n_R;
wire    ap_block_pp0_stage0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
reg    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state11_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
wire  signed [62:0] sext_ln7_cast_fu_170_p1;
reg  signed [62:0] sext_ln7_cast_reg_439;
wire   [0:0] icmp_ln7_fu_197_p2;
reg   [0:0] icmp_ln7_reg_444_pp0_iter1_reg;
reg   [0:0] icmp_ln7_reg_444_pp0_iter2_reg;
reg   [0:0] icmp_ln7_reg_444_pp0_iter3_reg;
wire   [0:0] icmp_ln11_fu_215_p2;
reg   [0:0] icmp_ln11_reg_448;
reg   [0:0] icmp_ln11_reg_448_pp0_iter1_reg;
reg   [0:0] icmp_ln11_reg_448_pp0_iter2_reg;
reg   [0:0] icmp_ln11_reg_448_pp0_iter3_reg;
reg   [0:0] icmp_ln11_reg_448_pp0_iter4_reg;
wire   [7:0] select_ln7_fu_221_p3;
reg   [7:0] select_ln7_reg_453;
reg   [7:0] select_ln7_reg_453_pp0_iter1_reg;
reg   [7:0] select_ln7_reg_453_pp0_iter2_reg;
reg   [7:0] select_ln7_reg_453_pp0_iter3_reg;
wire   [5:0] select_ln7_1_fu_235_p3;
reg   [5:0] select_ln7_1_reg_458;
reg   [5:0] select_ln7_1_reg_458_pp0_iter1_reg;
reg   [5:0] select_ln7_1_reg_458_pp0_iter2_reg;
reg   [5:0] select_ln7_1_reg_458_pp0_iter3_reg;
reg   [5:0] select_ln7_1_reg_458_pp0_iter4_reg;
reg   [63:0] gmem1_addr_5_reg_464;
wire   [0:0] ifzero_fu_307_p2;
reg   [0:0] ifzero_reg_470_pp0_iter1_reg;
reg   [0:0] ifzero_reg_470_pp0_iter2_reg;
reg   [0:0] ifzero_reg_470_pp0_iter3_reg;
reg   [63:0] gmem1_addr_4_reg_474;
reg    ap_block_pp0_stage1_11001;
reg  signed [31:0] gmem1_addr_5_read_reg_485;
reg   [31:0] s_V_reg_490;
reg   [31:0] gmem1_addr_4_read_reg_495;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] j_1_cast_fu_346_p1;
wire   [63:0] zext_ln7_fu_402_p1;
wire  signed [63:0] sext_ln1273_27_fu_291_p1;
wire  signed [63:0] sext_ln813_fu_336_p1;
reg   [31:0] lhs_fu_92;
wire    ap_loop_init;
reg   [7:0] j_fu_96;
wire   [7:0] add_ln11_fu_301_p2;
reg   [7:0] ap_sig_allocacmp_j_load;
reg   [5:0] i_fu_100;
reg   [5:0] ap_sig_allocacmp_i_load;
reg   [12:0] indvar_flatten336_fu_104;
wire   [12:0] add_ln7_fu_203_p2;
reg   [12:0] ap_sig_allocacmp_indvar_flatten336_load;
wire   [5:0] add_ln7_1_fu_229_p2;
wire   [6:0] trunc_ln13_fu_247_p1;
wire   [4:0] trunc_ln7_fu_243_p1;
wire   [13:0] shl_ln1_fu_251_p4;
wire   [14:0] zext_ln1273_2_fu_261_p1;
wire   [14:0] add_ln1273_2_fu_265_p2;
wire   [63:0] zext_ln1273_3_fu_271_p1;
wire   [63:0] add_ln1273_1_fu_275_p2;
wire   [61:0] trunc_ln3_fu_281_p4;
wire   [62:0] zext_ln7_1_fu_328_p1;
wire   [62:0] add_ln813_fu_331_p2;
wire   [31:0] select_ln7_2_fu_366_p3;
wire   [47:0] lhs_2_fu_373_p3;
wire   [47:0] r_V_5_fu_360_p2;
wire   [47:0] ret_V_fu_381_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter4_stage0;
reg    ap_idle_pp0_0to3;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to5;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

cnn_top_mul_32s_32s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
mul_32s_32s_48_1_1_U48(
    .din0(gmem1_addr_5_read_reg_485),
    .din1(flatten_V_q0),
    .dout(r_V_5_fu_360_p2)
);

cnn_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_fu_197_p2 == 1'd0))) begin
            i_fu_100 <= select_ln7_1_fu_235_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_100 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_fu_197_p2 == 1'd0))) begin
            indvar_flatten336_fu_104 <= add_ln7_fu_203_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten336_fu_104 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln7_fu_197_p2 == 1'd0))) begin
            j_fu_96 <= add_ln11_fu_301_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_96 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lhs_fu_92 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        lhs_fu_92 <= {{ret_V_fu_381_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ifzero_reg_470_pp0_iter4_reg == 1'd1))) begin
        gmem1_addr_4_read_reg_495 <= m_axi_gmem1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ifzero_reg_470 == 1'd1) & (icmp_ln7_reg_444 == 1'd0))) begin
        gmem1_addr_4_reg_474 <= sext_ln813_fu_336_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem1_addr_5_read_reg_485 <= m_axi_gmem1_RDATA;
        icmp_ln11_reg_448_pp0_iter1_reg <= icmp_ln11_reg_448;
        icmp_ln11_reg_448_pp0_iter2_reg <= icmp_ln11_reg_448_pp0_iter1_reg;
        icmp_ln11_reg_448_pp0_iter3_reg <= icmp_ln11_reg_448_pp0_iter2_reg;
        icmp_ln11_reg_448_pp0_iter4_reg <= icmp_ln11_reg_448_pp0_iter3_reg;
        icmp_ln7_reg_444 <= icmp_ln7_fu_197_p2;
        icmp_ln7_reg_444_pp0_iter1_reg <= icmp_ln7_reg_444;
        icmp_ln7_reg_444_pp0_iter2_reg <= icmp_ln7_reg_444_pp0_iter1_reg;
        icmp_ln7_reg_444_pp0_iter3_reg <= icmp_ln7_reg_444_pp0_iter2_reg;
        ifzero_reg_470_pp0_iter1_reg <= ifzero_reg_470;
        ifzero_reg_470_pp0_iter2_reg <= ifzero_reg_470_pp0_iter1_reg;
        ifzero_reg_470_pp0_iter3_reg <= ifzero_reg_470_pp0_iter2_reg;
        ifzero_reg_470_pp0_iter4_reg <= ifzero_reg_470_pp0_iter3_reg;
        select_ln7_1_reg_458_pp0_iter1_reg <= select_ln7_1_reg_458;
        select_ln7_1_reg_458_pp0_iter2_reg <= select_ln7_1_reg_458_pp0_iter1_reg;
        select_ln7_1_reg_458_pp0_iter3_reg <= select_ln7_1_reg_458_pp0_iter2_reg;
        select_ln7_1_reg_458_pp0_iter4_reg <= select_ln7_1_reg_458_pp0_iter3_reg;
        select_ln7_reg_453_pp0_iter1_reg <= select_ln7_reg_453;
        select_ln7_reg_453_pp0_iter2_reg <= select_ln7_reg_453_pp0_iter1_reg;
        select_ln7_reg_453_pp0_iter3_reg <= select_ln7_reg_453_pp0_iter2_reg;
        sext_ln7_cast_reg_439 <= sext_ln7_cast_fu_170_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln7_fu_197_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem1_addr_5_reg_464 <= sext_ln1273_27_fu_291_p1;
        icmp_ln11_reg_448 <= icmp_ln11_fu_215_p2;
        ifzero_reg_470 <= ifzero_fu_307_p2;
        select_ln7_1_reg_458 <= select_ln7_1_fu_235_p3;
        select_ln7_reg_453 <= select_ln7_fu_221_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        s_V_reg_490 <= {{ret_V_fu_381_p2[47:16]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (icmp_ln7_reg_444 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln7_reg_444_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 6'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_100;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten336_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten336_load = indvar_flatten336_fu_104;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 8'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_96;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        flatten_V_ce0 = 1'b1;
    end else begin
        flatten_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ifzero_reg_470 == 1'd1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln7_reg_444 == 1'd0)))) begin
        gmem1_blk_n_AR = m_axi_gmem1_ARREADY;
    end else begin
        gmem1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (ifzero_reg_470_pp0_iter4_reg == 1'd1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem1_blk_n_R = m_axi_gmem1_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ifzero_reg_470 == 1'd1))) begin
        m_axi_gmem1_ARADDR = gmem1_addr_4_reg_474;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln7_reg_444 == 1'd0))) begin
        m_axi_gmem1_ARADDR = gmem1_addr_5_reg_464;
    end else begin
        m_axi_gmem1_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ifzero_reg_470 == 1'd1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln7_reg_444 == 1'd0)))) begin
        m_axi_gmem1_ARVALID = 1'b1;
    end else begin
        m_axi_gmem1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ifzero_reg_470_pp0_iter4_reg == 1'd1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axi_gmem1_RREADY = 1'b1;
    end else begin
        m_axi_gmem1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_Dense_V_1_ce0 = 1'b1;
    end else begin
        out_Dense_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ifzero_reg_470_pp0_iter4_reg == 1'd1))) begin
        out_Dense_V_1_we0 = 1'b1;
    end else begin
        out_Dense_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_301_p2 = (select_ln7_fu_221_p3 + 8'd1);

assign add_ln1273_1_fu_275_p2 = (zext_ln1273_3_fu_271_p1 + Weights);

assign add_ln1273_2_fu_265_p2 = (zext_ln1273_2_fu_261_p1 + 15'd3648);

assign add_ln7_1_fu_229_p2 = (ap_sig_allocacmp_i_load + 6'd1);

assign add_ln7_fu_203_p2 = (ap_sig_allocacmp_indvar_flatten336_load + 13'd1);

assign add_ln813_fu_331_p2 = ($signed(zext_ln7_1_fu_328_p1) + $signed(sext_ln7_cast_reg_439));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ifzero_reg_470_pp0_iter4_reg == 1'd1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ifzero_reg_470_pp0_iter4_reg == 1'd1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_state10_pp0_stage1_iter4 = ((m_axi_gmem1_RVALID == 1'b0) & (ifzero_reg_470_pp0_iter4_reg == 1'd1));
end

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((m_axi_gmem1_ARREADY == 1'b0) & (icmp_ln7_reg_444 == 1'd0));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_gmem1_ARREADY == 1'b0) & (ifzero_reg_470 == 1'd1));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter4 = (m_axi_gmem1_RVALID == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign flatten_V_address0 = j_1_cast_fu_346_p1;

assign icmp_ln11_fu_215_p2 = ((ap_sig_allocacmp_j_load == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_197_p2 = ((ap_sig_allocacmp_indvar_flatten336_load == 13'd4096) ? 1'b1 : 1'b0);

assign ifzero_fu_307_p2 = ((add_ln11_fu_301_p2 == 8'd128) ? 1'b1 : 1'b0);

assign j_1_cast_fu_346_p1 = select_ln7_reg_453_pp0_iter3_reg;

assign lhs_2_fu_373_p3 = {{select_ln7_2_fu_366_p3}, {16'd0}};

assign m_axi_gmem1_ARBURST = 2'd0;

assign m_axi_gmem1_ARCACHE = 4'd0;

assign m_axi_gmem1_ARID = 1'd0;

assign m_axi_gmem1_ARLEN = 32'd1;

assign m_axi_gmem1_ARLOCK = 2'd0;

assign m_axi_gmem1_ARPROT = 3'd0;

assign m_axi_gmem1_ARQOS = 4'd0;

assign m_axi_gmem1_ARREGION = 4'd0;

assign m_axi_gmem1_ARSIZE = 3'd0;

assign m_axi_gmem1_ARUSER = 1'd0;

assign m_axi_gmem1_AWADDR = 64'd0;

assign m_axi_gmem1_AWBURST = 2'd0;

assign m_axi_gmem1_AWCACHE = 4'd0;

assign m_axi_gmem1_AWID = 1'd0;

assign m_axi_gmem1_AWLEN = 32'd0;

assign m_axi_gmem1_AWLOCK = 2'd0;

assign m_axi_gmem1_AWPROT = 3'd0;

assign m_axi_gmem1_AWQOS = 4'd0;

assign m_axi_gmem1_AWREGION = 4'd0;

assign m_axi_gmem1_AWSIZE = 3'd0;

assign m_axi_gmem1_AWUSER = 1'd0;

assign m_axi_gmem1_AWVALID = 1'b0;

assign m_axi_gmem1_BREADY = 1'b0;

assign m_axi_gmem1_WDATA = 32'd0;

assign m_axi_gmem1_WID = 1'd0;

assign m_axi_gmem1_WLAST = 1'b0;

assign m_axi_gmem1_WSTRB = 4'd0;

assign m_axi_gmem1_WUSER = 1'd0;

assign m_axi_gmem1_WVALID = 1'b0;

assign out_Dense_V_1_address0 = zext_ln7_fu_402_p1;

assign out_Dense_V_1_d0 = (gmem1_addr_4_read_reg_495 + s_V_reg_490);

assign ret_V_fu_381_p2 = (lhs_2_fu_373_p3 + r_V_5_fu_360_p2);

assign select_ln7_1_fu_235_p3 = ((icmp_ln11_fu_215_p2[0:0] == 1'b1) ? add_ln7_1_fu_229_p2 : ap_sig_allocacmp_i_load);

assign select_ln7_2_fu_366_p3 = ((icmp_ln11_reg_448_pp0_iter4_reg[0:0] == 1'b1) ? 32'd0 : lhs_fu_92);

assign select_ln7_fu_221_p3 = ((icmp_ln11_fu_215_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_j_load);

assign sext_ln1273_27_fu_291_p1 = $signed(trunc_ln3_fu_281_p4);

assign sext_ln7_cast_fu_170_p1 = $signed(sext_ln7);

assign sext_ln813_fu_336_p1 = $signed(add_ln813_fu_331_p2);

assign shl_ln1_fu_251_p4 = {{{trunc_ln13_fu_247_p1}, {trunc_ln7_fu_243_p1}}, {2'd0}};

assign trunc_ln13_fu_247_p1 = select_ln7_fu_221_p3[6:0];

assign trunc_ln3_fu_281_p4 = {{add_ln1273_1_fu_275_p2[63:2]}};

assign trunc_ln7_fu_243_p1 = select_ln7_1_fu_235_p3[4:0];

assign zext_ln1273_2_fu_261_p1 = shl_ln1_fu_251_p4;

assign zext_ln1273_3_fu_271_p1 = add_ln1273_2_fu_265_p2;

assign zext_ln7_1_fu_328_p1 = select_ln7_1_reg_458;

assign zext_ln7_fu_402_p1 = select_ln7_1_reg_458_pp0_iter4_reg;

endmodule //cnn_top_cnn_top_Pipeline_loop_for_a_Dense_0_loop_for_b_Dense_0
